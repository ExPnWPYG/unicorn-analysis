#+title: Analysis of Unicorn Startups
#+OPTIONS: H:3 date:nil author:nil
#+EXPORT_FILE_NAME: Analysis

* Config :noexport:
#+begin_src emacs-lisp :exports none :results none :eval always
(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-minted-options '(("frame" "lines") ("fontsize" "\\footnotesize") ("breakautoindent" "true") ("breaklines" "true"))
      org-latex-pdf-process
      '("latexmk -xelatex -quiet -shell-escape -f %f"))
#+end_src

#+latex_class: article
#+latex_class_options: [a4paper,12pt]

#+LATEX_HEADER: \usepackage[default,scale=0.95]{opensans}
#+LATEX_HEADER: \usepackage[table]{xcolor}
#+LATEX_HEADER: \usepackage[margin=0.8in,bmargin=1.0in,tmargin=1.0in]{geometry}
#+LATEX_HEADER: \usepackage{enumitem, csquotes, caption, array, booktabs, ltablex, adjustbox}
#+LATEX_HEADER: \usepackage{pifont, mathabx}
#+LATEX_HEADER: \usepackage{mathpazo}
#+LATEX_HEADER: \usepackage[dvipsnames]{xcolor}
#+LATEX_HEADER: \usepackage[inkscapearea=page]{svg}
#+LATEX_HEADER: \makeatletter
#+LATEX_HEADER: \newcommand*{\compress}{\@minipagetrue}
#+LATEX_HEADER: \makeatother
#+LATEX_HEADER: \newlist{tabenum}{enumerate}{1}
#+LATEX_HEADER: \setlist[tabenum]{label=\arabic*. ,leftmargin=*, itemsep=2pt, after=\vspace{-\baselineskip}, before=\vspace{-0.5\baselineskip}}
#+LATEX_HEADER: \newlist{tabitem}{itemize}{1}
#+LATEX_HEADER: \setlist[tabitem]{label=$\bullet$, leftmargin=*, itemsep=2pt, after=\vspace{-\baselineskip}, before=\vspace{-0.5\baselineskip}}
#+LATEX_HEADER: \keepXColumns
#+LaTeX_HEADER: \usepackage{multicol}
#+LaTeX_HEADER: \usepackage[none]{hyphenat}
#+LATEX_HEADER: \usepackage[linkcolor=MidnightBlue,urlcolor=Orange]{hyperref}
#+LATEX_HEADER: \hypersetup{colorlinks=true}
#+LATEX_HEADER: \AtBeginDocument{%
#+LATEX_HEADER: \hypersetup{
#+LATEX_HEADER:  allbordercolors={1 1 1},
#+LATEX_HEADER:  urlbordercolor=Orange,
#+LATEX_HEADER:  pdfborderstyle={/S/U/W 1}
#+LATEX_HEADER: }}
#+LATEX_HEADER: \usepackage{fontawesome5}
#+LaTeX_HEADER: \renewcommand\labelitemii{\sqbullet}
#+LaTeX_HEADER: \renewcommand\labelitemi{\bullet}

* COMMENT Setup
#+BEGIN_SRC emacs-lisp :session t
(pipenv-deactivate)
(pipenv-activate)
#+END_SRC

* Setup
** Import Packages
#+begin_src python :session t :eval no-export
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter
import seaborn as sns
import re
#+end_src

#+RESULTS:
: None

* Data Preparation
** Load Data

#+begin_src python :session t :eval no-export
pd.set_option('display.max_columns', 50, 'display.width', 200)
df = pd.read_csv('input/Unicorns_Completed.csv')
#+end_src

#+RESULTS:
: None
** Data Cleaning
#+begin_src python :session t :eval no-export :exports code
def convert_years_months(s):
    m = re.match(r'(\d+)y?\s?(\d+)m?o?', s)
    return f'{m[1]}y{m[2]}m' if m else s

df['Years to Unicorn'] = df['Years to Unicorn'].apply(convert_years_months)
#+end_src

#+RESULTS:
: None

** Prepare data

#+begin_src python :session t :eval no-export
df['Unicorn Date'] = pd.to_datetime(df['Unicorn Date'])
df['Valuation ($B)'] = pd.to_numeric(df['Valuation ($B)'])
#+end_src

#+RESULTS:
: None

** Preview data

#+begin_src python :session t :eval no-export :exports both :results table :wrap src text
df.head()
#+end_src

#+RESULTS:
#+begin_src text
|   | Company   | Valuation ($B) | Total Equity Funding ($) | Unicorn Date | Date Founded          | Years to Unicorn | Industry | Country            | City          | Select Investors | Years to Unicorn (Months)                         |     |
|---+-----------+----------------+--------------------------+--------------+-----------------------+------------------+----------+--------------------+---------------+------------------+---------------------------------------------------+-----|
| 0 | SpaceX    |          350.0 |               9000000000 | Timestamp    | (2012-12-01 00:00:00) |             2002 | 10y3m    | Enterprise Tech    | United States | Hawthorne        | Opus Capital, RRE Ventures, Relay Ventures        | 123 |
| 1 | ByteDance |          300.0 |               8000000000 | Timestamp    | (2017-04-07 00:00:00) |             2011 | 6y3m     | Enterprise Tech    | China         | Beijing          | Breyer Capital, Parkway VC, TIME Ventures         |  75 |
| 2 | OpenAI    |          157.0 |              18000000000 | Timestamp    | (2019-07-22 00:00:00) |             2015 | 4y6m     | Industrials        | United States | San Francisco    | Dynamo VC, Susa Ventures, Founders Fund           |  54 |
| 3 | Ant Group |          150.0 |              19000000000 | Timestamp    | (2017-01-01 00:00:00) |             2014 | 3y       | Financial Services | China         | Hangzhou         | Alibaba Group, CPP Investments, The Carlyle Group |  36 |
| 4 | Stripe    |           70.0 |               9000000000 | Timestamp    | (2014-01-23 00:00:00) |             2009 | 5y       | Consumer & Retail  | United States | San Francisco    | Sequoia Capital China, ZhenFund, K2 Ventures      |  60 |
#+end_src


* Descriptive Analysis
** Distribution of Valuations across Different Industries
#+begin_src python :session t :eval no-export :exports both :results table
# Group by industry and sum valuations
industry_valuation_df = df.groupby('Industry')['Valuation ($B)'].sum().reset_index().sort_values('Valuation ($B)', ascending=False)
industry_valuation_df
#+end_src

#+RESULTS:
|   | Industry                   | Valuation ($B) |
|---+----------------------------+----------------|
| 1 | Enterprise Tech            |        1759.04 |
| 2 | Financial Services         |         760.16 |
| 5 | Industrials                |         678.55 |
| 0 | Consumer & Retail          |          593.3 |
| 4 | Healthcare & Life Sciences |         398.45 |
| 7 | Media & Entertainment      |         200.29 |
| 6 | Insurance                  |         117.06 |
| 8 | West Palm Beach            |            3.0 |
| 3 | Health                     |            1.5 |

#+begin_src python :session t :eval no-export :exports both :results file :var f="output/fig/Distribution-of-Valuations-across-Different-Industries.png"
plt.figure(figsize=(12, 6))
plt.barh(industry_valuation_df['Industry'], industry_valuation_df['Valuation ($B)'], color='skyblue')
plt.title('Distribution of Valuations across Different Industries')
plt.xlabel('Total Valuation ($B)')
plt.ylabel('Industry')
plt.grid(axis='x', alpha=0.75)
plt.show()
#+end_src

#+RESULTS:
[[file:output/fig/Distribution-of-Valuations-across-Different-Industries.png]]
** Distribution of Valuations across Different Countries
#+begin_src python :session t :eval no-export :exports both :results table
# Group by Country and sum valuations
country_valuation_df = df.groupby('Country')['Valuation ($B)'].sum().reset_index().sort_values('Valuation ($B)', ascending=False)[:20]
country_valuation_df
#+end_src

#+RESULTS:
|    | Country        | Valuation ($B) |
|----+----------------+----------------|
| 53 | United States  |        2564.14 |
| 10 | China          |         835.65 |
| 52 | United Kingdom |         197.35 |
| 24 | India          |         172.07 |
| 43 | Singapore      |          92.06 |
| 21 | Germany        |           85.9 |
| 20 | France         |          70.86 |
| 27 | Israel         |          56.22 |
|  6 | Canada         |           56.0 |
|  1 | Australia      |          48.84 |
|  5 | Brazil         |          34.13 |
| 45 | South Korea    |          31.34 |
| 47 | Sweden         |          29.42 |
| 36 | Netherlands    |          24.46 |
| 35 | Mexico         |           18.7 |
| 19 | Finland        |          14.91 |
|  3 | Belgium        |          11.95 |
| 42 | Seychelles     |           11.8 |
| 26 | Ireland        |          11.05 |
| 29 | Japan          |          10.82 |

#+begin_src python :session t :eval no-export :exports both :results file :var f="output/fig/Distribution-of-Valuations-across-Different-Countries.png"
plt.figure(figsize=(12, 8))
plt.barh(country_valuation_df['Country'], country_valuation_df['Valuation ($B)'])
plt.title('Distribution of Valuations across Different Countries')
plt.xlabel('Total Valuation ($B)')
plt.ylabel('Countries')
plt.grid(axis='x', alpha=0.75)
plt.show()
#+end_src

#+RESULTS:
[[file:output/fig/Distribution-of-Valuations-across-Different-Countries.png]]

* Time-Based Analysis

** Unicorn Growth Over Time
#+begin_src python :session t :eval no-export :exports both :results file :var f="output/fig/Growth-Over-Time.png"
unicorn_count = df.groupby(df['Unicorn Date'].dt.year).size()
plt.figure(figsize=(12, 6))
plt.plot(unicorn_count.index, unicorn_count.values, marker='o')
plt.title('Number of Unicorns Created Each Year')
plt.xlabel('Year')
plt.ylabel('Number of Unicorns')
plt.xticks(unicorn_count.index, rotation=45)
plt.grid()
plt.show()
#+end_src

#+RESULTS:
[[file:output/fig/Growth-Over-Time.png]]

** Years to Unicorn

#+begin_src python :session t :eval no-export :exports code
# Function to convert "Years to Unicorn" into total months
def convert_years_to_months(years_str):
    if 'y' in years_str and 'm' in years_str:
        years, months = years_str.split('y')
        months = months.replace('m', '').strip()
        return int(years.strip()) * 12 + int(months)
    elif 'y' in years_str:
        years = years_str.replace('y', '').strip()
        return int(years) * 12
    elif 'm' in years_str:
        months = years_str.replace('mo', '').replace('m', '').strip()
        return int(months)
    else:
        return None

df['Years to Unicorn (Months)'] = df['Years to Unicorn'].apply(convert_years_to_months)
#+end_src

#+RESULTS:
: None

#+begin_src python :session t :eval no-export :exports both :results file :var f="output/fig/Years-to-Unicorn.png"
plt.figure(figsize=(12, 6))
plt.hist(df['Years to Unicorn (Months)'].dropna(), bins=30, color='skyblue')
plt.title('Distribution of Years to Unicorn')
plt.xlabel('Months to Unicorn')
plt.ylabel('Number of Unicorns')
plt.grid(axis='y', alpha=0.75)
plt.show()
#+end_src

#+RESULTS:
[[file:output/fig/Years-to-Unicorn.png]]
