#+title: Analysis of Unicorn Startups
#+OPTIONS: H:3 date:nil author:nil
#+EXPORT_FILE_NAME: Analysis
#+PROPERTY: header-args:jupyter-python :session t :eval no-export :exports both

* Config :noexport:
#+begin_src emacs-lisp :exports none :results none :eval always
(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-minted-options '(("frame" "lines") ("fontsize" "\\footnotesize") ("breakautoindent" "true") ("breaklines" "true"))
      org-latex-pdf-process
      '("latexmk -xelatex -quiet -shell-escape -f %f"))
#+end_src

#+latex_class: article
#+latex_class_options: [a4paper,12pt]

#+LATEX_HEADER: \usepackage[default,scale=0.95]{opensans}
#+LATEX_HEADER: \usepackage[table]{xcolor}
#+LATEX_HEADER: \usepackage[margin=0.8in,bmargin=1.0in,tmargin=1.0in]{geometry}
#+LATEX_HEADER: \usepackage{enumitem, csquotes, caption, array, booktabs, ltablex, adjustbox}
#+LATEX_HEADER: \usepackage{pifont, mathabx}
#+LATEX_HEADER: \usepackage{mathpazo}
#+LATEX_HEADER: \usepackage[dvipsnames]{xcolor}
#+LATEX_HEADER: \usepackage[inkscapearea=page]{svg}
#+LATEX_HEADER: \makeatletter
#+LATEX_HEADER: \newcommand*{\compress}{\@minipagetrue}
#+LATEX_HEADER: \makeatother
#+LATEX_HEADER: \newlist{tabenum}{enumerate}{1}
#+LATEX_HEADER: \setlist[tabenum]{label=\arabic*. ,leftmargin=*, itemsep=2pt, after=\vspace{-\baselineskip}, before=\vspace{-0.5\baselineskip}}
#+LATEX_HEADER: \newlist{tabitem}{itemize}{1}
#+LATEX_HEADER: \setlist[tabitem]{label=$\bullet$, leftmargin=*, itemsep=2pt, after=\vspace{-\baselineskip}, before=\vspace{-0.5\baselineskip}}
#+LATEX_HEADER: \keepXColumns
#+LaTeX_HEADER: \usepackage{multicol}
#+LaTeX_HEADER: \usepackage[none]{hyphenat}
#+LATEX_HEADER: \usepackage[linkcolor=MidnightBlue,urlcolor=Orange]{hyperref}
#+LATEX_HEADER: \hypersetup{colorlinks=true}
#+LATEX_HEADER: \AtBeginDocument{%
#+LATEX_HEADER: \hypersetup{
#+LATEX_HEADER:  allbordercolors={1 1 1},
#+LATEX_HEADER:  urlbordercolor=Orange,
#+LATEX_HEADER:  pdfborderstyle={/S/U/W 1}
#+LATEX_HEADER: }}
#+LATEX_HEADER: \usepackage{fontawesome5}
#+LaTeX_HEADER: \renewcommand\labelitemii{\sqbullet}
#+LaTeX_HEADER: \renewcommand\labelitemi{\bullet}

* COMMENT Setup
#+BEGIN_SRC emacs-lisp :exports none
(pipenv-deactivate)
(pipenv-activate)
(load "ob-jupyter")
#+END_SRC

#+RESULTS:
: t

* Setup
** Import Packages
#+begin_src jupyter-python
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter
import seaborn as sns
import re
#+end_src

#+RESULTS:

* Data Preparation
** Load Data

#+begin_src jupyter-python
pd.set_option('display.max_columns', 50, 'display.width', 200)
df = pd.read_csv('input/Unicorns_Completed.csv')
#+end_src

#+RESULTS:
** Data Cleaning
#+begin_src jupyter-python
def convert_years_months(s):
    m = re.match(r'(\d+)y?\s?(\d+)m?o?', s)
    return f'{m[1]}y{m[2]}m' if m else s

df['Years to Unicorn'] = df['Years to Unicorn'].apply(convert_years_months)
#+end_src

#+RESULTS:

** Prepare data

#+begin_src jupyter-python
df['Unicorn Date'] = pd.to_datetime(df['Unicorn Date'])
df['Valuation ($B)'] = pd.to_numeric(df['Valuation ($B)'])
#+end_src

#+RESULTS:

** Preview data

 #+begin_src jupyter-python
 df.head()
 #+end_src

 #+RESULTS:
 #+begin_export html
 <div>
 <style scoped>
     .dataframe tbody tr th:only-of-type {
         vertical-align: middle;
     }

     .dataframe tbody tr th {
         vertical-align: top;
     }

     .dataframe thead th {
         text-align: right;
     }
 </style>
 <table border="1" class="dataframe">
   <thead>
     <tr style="text-align: right;">
       <th></th>
       <th>Company</th>
       <th>Valuation ($B)</th>
       <th>Total Equity Funding ($)</th>
       <th>Unicorn Date</th>
       <th>Date Founded</th>
       <th>Years to Unicorn</th>
       <th>Industry</th>
       <th>Country</th>
       <th>City</th>
       <th>Select Investors</th>
     </tr>
   </thead>
   <tbody>
     <tr>
       <th>0</th>
       <td>SpaceX</td>
       <td>350.0</td>
       <td>9000000000</td>
       <td>2012-12-01</td>
       <td>2002</td>
       <td>10y3m</td>
       <td>Enterprise Tech</td>
       <td>United States</td>
       <td>Hawthorne</td>
       <td>Opus Capital, RRE Ventures, Relay Ventures</td>
     </tr>
     <tr>
       <th>1</th>
       <td>ByteDance</td>
       <td>300.0</td>
       <td>8000000000</td>
       <td>2017-04-07</td>
       <td>2011</td>
       <td>6y3m</td>
       <td>Enterprise Tech</td>
       <td>China</td>
       <td>Beijing</td>
       <td>Breyer Capital, Parkway VC, TIME Ventures</td>
     </tr>
     <tr>
       <th>2</th>
       <td>OpenAI</td>
       <td>157.0</td>
       <td>18000000000</td>
       <td>2019-07-22</td>
       <td>2015</td>
       <td>4y6m</td>
       <td>Industrials</td>
       <td>United States</td>
       <td>San Francisco</td>
       <td>Dynamo VC, Susa Ventures, Founders Fund</td>
     </tr>
     <tr>
       <th>3</th>
       <td>Ant Group</td>
       <td>150.0</td>
       <td>19000000000</td>
       <td>2017-01-01</td>
       <td>2014</td>
       <td>3y</td>
       <td>Financial Services</td>
       <td>China</td>
       <td>Hangzhou</td>
       <td>Alibaba Group, CPP Investments, The Carlyle Group</td>
     </tr>
     <tr>
       <th>4</th>
       <td>Stripe</td>
       <td>70.0</td>
       <td>9000000000</td>
       <td>2014-01-23</td>
       <td>2009</td>
       <td>5y</td>
       <td>Consumer &amp; Retail</td>
       <td>United States</td>
       <td>San Francisco</td>
       <td>Sequoia Capital China, ZhenFund, K2 Ventures</td>
     </tr>
   </tbody>
 </table>
 </div>
 #+end_export




* Descriptive Analysis
** Distribution of Valuations across Different Industries

  #+begin_src jupyter-python
  # Group by industry and sum valuations
  industry_valuation_df = df.groupby('Industry')['Valuation ($B)'].sum().reset_index().sort_values('Valuation ($B)', ascending=False)
  industry_valuation_df
  #+end_src

  #+RESULTS:
  #+begin_export html
  <div>
  <style scoped>
      .dataframe tbody tr th:only-of-type {
          vertical-align: middle;
      }

      .dataframe tbody tr th {
          vertical-align: top;
      }

      .dataframe thead th {
          text-align: right;
      }
  </style>
  <table border="1" class="dataframe">
    <thead>
      <tr style="text-align: right;">
        <th></th>
        <th>Industry</th>
        <th>Valuation ($B)</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <th>1</th>
        <td>Enterprise Tech</td>
        <td>1759.04</td>
      </tr>
      <tr>
        <th>2</th>
        <td>Financial Services</td>
        <td>760.16</td>
      </tr>
      <tr>
        <th>5</th>
        <td>Industrials</td>
        <td>678.55</td>
      </tr>
      <tr>
        <th>0</th>
        <td>Consumer &amp; Retail</td>
        <td>593.30</td>
      </tr>
      <tr>
        <th>4</th>
        <td>Healthcare &amp; Life Sciences</td>
        <td>398.45</td>
      </tr>
      <tr>
        <th>7</th>
        <td>Media &amp; Entertainment</td>
        <td>200.29</td>
      </tr>
      <tr>
        <th>6</th>
        <td>Insurance</td>
        <td>117.06</td>
      </tr>
      <tr>
        <th>8</th>
        <td>West Palm Beach</td>
        <td>3.00</td>
      </tr>
      <tr>
        <th>3</th>
        <td>Health</td>
        <td>1.50</td>
      </tr>
    </tbody>
  </table>
  </div>
  #+end_export



  #+begin_src jupyter-python
  plt.figure(figsize=(12, 6))
  plt.barh(industry_valuation_df['Industry'], industry_valuation_df['Valuation ($B)'], color='skyblue')
  plt.title('Distribution of Valuations across Different Industries')
  plt.xlabel('Total Valuation ($B)')
  plt.ylabel('Industry')
  plt.grid(axis='x', alpha=0.75)
  #+end_src

  #+RESULTS:
  [[file:./.ob-jupyter/8c6a7ff1694ea1846cd3c5ac87ae4f8af9a21964.png]]


** Distribution of Valuations across Different Countries

  #+begin_src jupyter-python
  # Group by Country and sum valuations
  country_valuation_df = df.groupby('Country')['Valuation ($B)'].sum().reset_index().sort_values('Valuation ($B)', ascending=False).head(20)
  country_valuation_df
  #+end_src

  #+RESULTS:
  #+begin_export html
  <div>
  <style scoped>
      .dataframe tbody tr th:only-of-type {
          vertical-align: middle;
      }

      .dataframe tbody tr th {
          vertical-align: top;
      }

      .dataframe thead th {
          text-align: right;
      }
  </style>
  <table border="1" class="dataframe">
    <thead>
      <tr style="text-align: right;">
        <th></th>
        <th>Country</th>
        <th>Valuation ($B)</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <th>53</th>
        <td>United States</td>
        <td>2564.14</td>
      </tr>
      <tr>
        <th>10</th>
        <td>China</td>
        <td>835.65</td>
      </tr>
      <tr>
        <th>52</th>
        <td>United Kingdom</td>
        <td>197.35</td>
      </tr>
      <tr>
        <th>24</th>
        <td>India</td>
        <td>172.07</td>
      </tr>
      <tr>
        <th>43</th>
        <td>Singapore</td>
        <td>92.06</td>
      </tr>
      <tr>
        <th>21</th>
        <td>Germany</td>
        <td>85.90</td>
      </tr>
      <tr>
        <th>20</th>
        <td>France</td>
        <td>70.86</td>
      </tr>
      <tr>
        <th>27</th>
        <td>Israel</td>
        <td>56.22</td>
      </tr>
      <tr>
        <th>6</th>
        <td>Canada</td>
        <td>56.00</td>
      </tr>
      <tr>
        <th>1</th>
        <td>Australia</td>
        <td>48.84</td>
      </tr>
      <tr>
        <th>5</th>
        <td>Brazil</td>
        <td>34.13</td>
      </tr>
      <tr>
        <th>45</th>
        <td>South Korea</td>
        <td>31.34</td>
      </tr>
      <tr>
        <th>47</th>
        <td>Sweden</td>
        <td>29.42</td>
      </tr>
      <tr>
        <th>36</th>
        <td>Netherlands</td>
        <td>24.46</td>
      </tr>
      <tr>
        <th>35</th>
        <td>Mexico</td>
        <td>18.70</td>
      </tr>
      <tr>
        <th>19</th>
        <td>Finland</td>
        <td>14.91</td>
      </tr>
      <tr>
        <th>3</th>
        <td>Belgium</td>
        <td>11.95</td>
      </tr>
      <tr>
        <th>42</th>
        <td>Seychelles</td>
        <td>11.80</td>
      </tr>
      <tr>
        <th>26</th>
        <td>Ireland</td>
        <td>11.05</td>
      </tr>
      <tr>
        <th>29</th>
        <td>Japan</td>
        <td>10.82</td>
      </tr>
    </tbody>
  </table>
  </div>
  #+end_export


  #+begin_src jupyter-python
  plt.figure(figsize=(12, 8))
  plt.barh(country_valuation_df['Country'], country_valuation_df['Valuation ($B)'])
  plt.title('Distribution of Valuations across Different Countries')
  plt.xlabel('Total Valuation ($B)')
  plt.ylabel('Countries')
  plt.grid(axis='x', alpha=0.75)
  plt.show()
  #+end_src

  #+RESULTS:
  [[file:./.ob-jupyter/cdbbe50d70386c26ddaf23f8af5848b55ec474ae.png]]

* Time-Based Analysis

** Unicorn Growth Over Time

  #+begin_src jupyter-python
  unicorn_count = df.groupby(df['Unicorn Date'].dt.year).size()
  plt.figure(figsize=(12, 6))
  plt.plot(unicorn_count.index, unicorn_count.values, marker='o')
  plt.title('Number of Unicorns Created Each Year')
  plt.xlabel('Year')
  plt.ylabel('Number of Unicorns')
  plt.xticks(unicorn_count.index, rotation=45)
  plt.grid()
  plt.show()
  #+end_src

  #+RESULTS:
  [[file:./.ob-jupyter/bcc00d2a9abdbab683ef1209128ac52a061d0e20.png]]



** Years to Unicorn

  #+begin_src jupyter-python
  # Function to convert "Years to Unicorn" into total months
  def convert_years_to_months(years_str):
      if 'y' in years_str and 'm' in years_str:
          years, months = years_str.split('y')
          months = months.replace('m', '').strip()
          return int(years.strip()) * 12 + int(months)
      elif 'y' in years_str:
          years = years_str.replace('y', '').strip()
          return int(years) * 12
      elif 'm' in years_str:
          months = years_str.replace('mo', '').replace('m', '').strip()
          return int(months)
      else:
          return None

  df['Years to Unicorn (Months)'] = df['Years to Unicorn'].apply(convert_years_to_months)
  #+end_src

  #+RESULTS:



  #+begin_src jupyter-python
  plt.figure(figsize=(12, 6))
  plt.hist(df['Years to Unicorn (Months)'].dropna(), bins=30, color='skyblue')
  plt.title('Distribution of Years to Unicorn')
  plt.xlabel('Months to Unicorn')
  plt.ylabel('Number of Unicorns')
  plt.grid(axis='y', alpha=0.75)
  plt.show()
  #+end_src

  #+RESULTS:
  [[file:./.ob-jupyter/cc74224a16e29a19d8a2ce7ae2b9ecbacccf90e8.png]]
