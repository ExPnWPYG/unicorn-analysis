#+title: Analysis of Unicorn Startups
#+OPTIONS: H:5 date:nil author:nil
#+EXPORT_FILE_NAME: Analysis
#+PROPERTY: header-args:jupyter-python :session t :eval no-export :exports both

* Export Settings :noexport:
#+begin_src emacs-lisp :exports none :results none :eval always
(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-minted-options '(("frame" "lines") ("fontsize" "\\footnotesize") ("breakautoindent" "true") ("breaklines" "true"))
      org-latex-pdf-process
      '("latexmk -xelatex -quiet -shell-escape -f %f"))
#+end_src

#+BEGIN_SRC emacs-lisp
(pipenv-deactivate)
(pipenv-activate)
#+END_SRC

#+RESULTS:
: t

#+latex_class: article
#+latex_class_options: [a4paper,12pt]

#+LATEX_HEADER: \usepackage[default,scale=0.95]{opensans}
#+LATEX_HEADER: \usepackage[table]{xcolor}
#+LATEX_HEADER: \usepackage[margin=0.8in,bmargin=1.0in,tmargin=1.0in]{geometry}
#+LATEX_HEADER: \usepackage{enumitem, csquotes, caption, array, booktabs, ltablex, adjustbox}
#+LATEX_HEADER: \usepackage{pifont, mathabx}
#+LATEX_HEADER: \usepackage{mathpazo}
#+LATEX_HEADER: \usepackage[dvipsnames]{xcolor}
#+LATEX_HEADER: \usepackage[inkscapearea=page]{svg}
#+LATEX_HEADER: \makeatletter
#+LATEX_HEADER: \newcommand*{\compress}{\@minipagetrue}
#+LATEX_HEADER: \makeatother
#+LATEX_HEADER: \newlist{tabenum}{enumerate}{1}
#+LATEX_HEADER: \setlist[tabenum]{label=\arabic*. ,leftmargin=*, itemsep=2pt, after=\vspace{-\baselineskip}, before=\vspace{-0.5\baselineskip}}
#+LATEX_HEADER: \newlist{tabitem}{itemize}{1}
#+LATEX_HEADER: \setlist[tabitem]{label=$\bullet$, leftmargin=*, itemsep=2pt, after=\vspace{-\baselineskip}, before=\vspace{-0.5\baselineskip}}
#+LATEX_HEADER: \keepXColumns
#+LaTeX_HEADER: \usepackage{multicol}
#+LaTeX_HEADER: \usepackage[none]{hyphenat}
#+LATEX_HEADER: \usepackage[linkcolor=MidnightBlue,urlcolor=Orange]{hyperref}
#+LATEX_HEADER: \hypersetup{colorlinks=true}
#+LATEX_HEADER: \AtBeginDocument{%
#+LATEX_HEADER: \hypersetup{
#+LATEX_HEADER:  allbordercolors={1 1 1},
#+LATEX_HEADER:  urlbordercolor=Orange,
#+LATEX_HEADER:  pdfborderstyle={/S/U/W 1}
#+LATEX_HEADER: }}
#+LATEX_HEADER: \usepackage{fontawesome5}
#+LaTeX_HEADER: \renewcommand\labelitemii{\sqbullet}
#+LaTeX_HEADER: \renewcommand\labelitemi{\bullet}

* Introduction
- *What is a Unicorn Startup?*

  In business, a unicorn is a startup company valued at over US$1 billion which is privately owned and not listed on a share market.

* Setup
** Import Packages
#+begin_src jupyter-python
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter
import seaborn as sns
import re
#+end_src

#+RESULTS:
** Theming
#+begin_src jupyter-python
sns.set_theme(palette='husl')
#+end_src

#+RESULTS:

* Data Preparation
** Load Data

#+begin_src jupyter-python
pd.set_option('display.max_columns', 50, 'display.width', 200)
df = pd.read_csv('input/datasets/Unicorns_Completed (2024).csv')
df_wiki = pd.read_csv('input/raw_data/list-of-unicorn-startups_20250619 (wikipedia).csv')
#+end_src

#+RESULTS:

** Data Cleaning
#+begin_src jupyter-python
def convert_years_months(s):
    m = re.match(r'(\d+)y?\s?(\d+)m?o?', s)
    return f'{m[1]}y{m[2]}m' if m else s

df['Years to Unicorn'] = df['Years to Unicorn'].apply(convert_years_months)

def correct_industry_labels(s):
    if s == 'Health':
        return 'Healthcare & Life Sciences'
    if s == 'West Palm Beach':
        return 'Enterprise Tech'
    return s

df['Industry'] = df['Industry'].apply(correct_industry_labels)

def correct_company_names(s):
    if s == 'Scale':
        return 'Scale AI'
    return s

df['Company'] = df['Company'].apply(correct_company_names)
#+end_src

#+RESULTS:

** Prepare Data
*** Column Types
#+begin_src jupyter-python
df['Unicorn Date'] = pd.to_datetime(df['Unicorn Date'])
df['Valuation ($B)'] = pd.to_numeric(df['Valuation ($B)'])
df['Valuation ($)'] = df['Valuation ($B)'] * 1e9
df['Unicorn Year'] = df['Unicorn Date'].dt.year
df['Funding ($B)'] = df['Total Equity Funding ($)'] / 1e9
df['Funding ($M)'] = df['Total Equity Funding ($)'] / 1e6
df['Investors'] = df['Select Investors'].str.split(', ')
#+end_src

#+RESULTS:
*** Time to Unicorn
#+begin_src jupyter-python
def convert_years_to_months(years_str):
    if 'y' in years_str and 'm' in years_str:
        years, months = years_str.split('y')
        months = months.replace('m', '').strip()
        return int(years.strip()) * 12 + int(months)
    elif 'y' in years_str:
        years = years_str.replace('y', '').strip()
        return int(years) * 12
    elif 'm' in years_str:
        months = years_str.replace('mo', '').replace('m', '').strip()
        return int(months)
    else:
        return None
df['Years to Unicorn (Months)'] = df['Years to Unicorn'].apply(convert_years_to_months)
df['Years to Unicorn (Converted)'] = df['Years to Unicorn (Months)'] / 12
#+end_src

#+RESULTS:

*** Merge datasets (Latest Valuations and Founders)
#+begin_src jupyter-python
df_wiki.rename(columns={'Valuation (US$ billions)': 'Latest Valuation ($B)'}, inplace=True)
df_wiki = df_wiki.drop_duplicates('Company')
df_wiki['Company'] = df_wiki['Company'].str.strip()
df_wiki['Founder(s)'] = df_wiki['Founder(s)'].str.replace(' and ', ', ').str.split(', ')
df = df.merge(df_wiki[['Company', 'Latest Valuation ($B)', 'Founder(s)']], on='Company', how='left')
df['Latest Valuation ($B)'] = pd.to_numeric(df['Latest Valuation ($B)'].fillna(value=df['Valuation ($B)']))
#+end_src

#+RESULTS:

** Preview

  #+begin_src jupyter-python
  df.info()
  #+end_src

  #+RESULTS:
  #+begin_example
  <class 'pandas.core.frame.DataFrame'>
  RangeIndex: 1244 entries, 0 to 1243
  Data columns (total 19 columns):
   #   Column                        Non-Null Count  Dtype
  ---  ------                        --------------  -----
   0   Company                       1244 non-null   object
   1   Valuation ($B)                1244 non-null   float64
   2   Total Equity Funding ($)      1244 non-null   int64
   3   Unicorn Date                  1244 non-null   datetime64[ns]
   4   Date Founded                  1244 non-null   int64
   5   Years to Unicorn              1244 non-null   object
   6   Industry                      1244 non-null   object
   7   Country                       1244 non-null   object
   8   City                          1244 non-null   object
   9   Select Investors              1244 non-null   object
   10  Valuation ($)                 1244 non-null   float64
   11  Unicorn Year                  1244 non-null   int32
   12  Funding ($B)                  1244 non-null   float64
   13  Funding ($M)                  1244 non-null   float64
   14  Investors                     1244 non-null   object
   15  Years to Unicorn (Months)     1244 non-null   int64
   16  Years to Unicorn (Converted)  1244 non-null   float64
   17  Latest Valuation ($B)         1244 non-null   float64
   18  Founder(s)                    130 non-null    object
  dtypes: datetime64[ns](1), float64(6), int32(1), int64(3), object(8)
  memory usage: 179.9+ KB
  #+end_example

* Descriptive Analysis
** Distribution
*** Valuations
**** Distribution of Valuations across Different Industries

  #+begin_src jupyter-python
  industry_valuation_df = df.groupby('Industry')['Valuation ($B)'].sum().reset_index().sort_values('Valuation ($B)', ascending=False)
  industry_valuation_df
  #+end_src

  #+RESULTS:
  #+begin_export html
  <div>
  <style scoped>
      .dataframe tbody tr th:only-of-type {
          vertical-align: middle;
      }

      .dataframe tbody tr th {
          vertical-align: top;
      }

      .dataframe thead th {
          text-align: right;
      }
  </style>
  <table border="1" class="dataframe">
    <thead>
      <tr style="text-align: right;">
        <th></th>
        <th>Industry</th>
        <th>Valuation ($B)</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <th>1</th>
        <td>Enterprise Tech</td>
        <td>1762.04</td>
      </tr>
      <tr>
        <th>2</th>
        <td>Financial Services</td>
        <td>760.16</td>
      </tr>
      <tr>
        <th>4</th>
        <td>Industrials</td>
        <td>678.55</td>
      </tr>
      <tr>
        <th>0</th>
        <td>Consumer &amp; Retail</td>
        <td>593.30</td>
      </tr>
      <tr>
        <th>3</th>
        <td>Healthcare &amp; Life Sciences</td>
        <td>399.95</td>
      </tr>
      <tr>
        <th>6</th>
        <td>Media &amp; Entertainment</td>
        <td>200.29</td>
      </tr>
      <tr>
        <th>5</th>
        <td>Insurance</td>
        <td>117.06</td>
      </tr>
    </tbody>
  </table>
  </div>
  #+end_export

  [[file:./.ob-jupyter/a9336f62e6c8e5d2ac6655162a890402fd653dc6.png]]

**** Mean Distribution of Valuations across Different Industries

  #+begin_src jupyter-python
  fig, ax = plt.subplots(figsize=(12, 6), dpi=300)
  sns.boxplot(df, y='Industry', x='Valuation ($B)', hue='Industry', showfliers=False)
  plt.suptitle('Distribution of Valuations across Different Industries')
  ax.set(xlabel='Total Valuation ($B)',
         ylabel='Industry')
  plt.grid(axis='x', alpha=0.7)
  plt.show()
  #+end_src

  #+RESULTS:
  [[file:./.ob-jupyter/69ee8baa97f1cd2a0ec1d03e6e990ad9249a4c62.png]]

  #+begin_src jupyter-python
  industry_valuation_df = df.groupby('Industry')['Valuation ($B)'].mean().reset_index().sort_values('Valuation ($B)', ascending=False)
  industry_valuation_df
  #+end_src

  #+RESULTS:
  #+begin_export html
  <div>
  <style scoped>
      .dataframe tbody tr th:only-of-type {
          vertical-align: middle;
      }

      .dataframe tbody tr th {
          vertical-align: top;
      }

      .dataframe thead th {
          text-align: right;
      }
  </style>
  <table border="1" class="dataframe">
    <thead>
      <tr style="text-align: right;">
        <th></th>
        <th>Industry</th>
        <th>Valuation ($B)</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <th>5</th>
        <td>Insurance</td>
        <td>4.682400</td>
      </tr>
      <tr>
        <th>1</th>
        <td>Enterprise Tech</td>
        <td>4.350716</td>
      </tr>
      <tr>
        <th>4</th>
        <td>Industrials</td>
        <td>3.707923</td>
      </tr>
      <tr>
        <th>3</th>
        <td>Healthcare &amp; Life Sciences</td>
        <td>3.389407</td>
      </tr>
      <tr>
        <th>2</th>
        <td>Financial Services</td>
        <td>3.363540</td>
      </tr>
      <tr>
        <th>0</th>
        <td>Consumer &amp; Retail</td>
        <td>2.937129</td>
      </tr>
      <tr>
        <th>6</th>
        <td>Media &amp; Entertainment</td>
        <td>2.356353</td>
      </tr>
    </tbody>
  </table>
  </div>
  #+end_export

  #+begin_src jupyter-python
  plt.figure(figsize=(12, 6),dpi=300)
  ax = sns.barplot(industry_valuation_df,
                   y='Industry',
                   x='Valuation ($B)',
                   hue='Industry')
  for i in ax.containers:
      ax.bar_label(i, fmt='%.2f')
  plt.title('Mean Distribution of Valuations across Different Industries')
  plt.xlabel('Mean Valuation ($B)')
  plt.ylabel('Industry')
  plt.grid(axis='x', alpha=0.75)
  #+end_src

  #+RESULTS:
  [[file:./.ob-jupyter/5073deb1c30d98fb5c842eaec27fc16edc190b6d.png]]

**** Distribution of Valuations across Different Countries

  #+begin_src jupyter-python
  country_valuation_df = df.groupby('Country')['Valuation ($B)'].sum().reset_index().sort_values('Valuation ($B)', ascending=False).head(20)
  country_valuation_df
  #+end_src

  #+RESULTS:
  #+begin_export html
  <div>
  <style scoped>
      .dataframe tbody tr th:only-of-type {
          vertical-align: middle;
      }

      .dataframe tbody tr th {
          vertical-align: top;
      }

      .dataframe thead th {
          text-align: right;
      }
  </style>
  <table border="1" class="dataframe">
    <thead>
      <tr style="text-align: right;">
        <th></th>
        <th>Country</th>
        <th>Valuation ($B)</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <th>53</th>
        <td>United States</td>
        <td>2564.14</td>
      </tr>
      <tr>
        <th>10</th>
        <td>China</td>
        <td>835.65</td>
      </tr>
      <tr>
        <th>52</th>
        <td>United Kingdom</td>
        <td>197.35</td>
      </tr>
      <tr>
        <th>24</th>
        <td>India</td>
        <td>172.07</td>
      </tr>
      <tr>
        <th>43</th>
        <td>Singapore</td>
        <td>92.06</td>
      </tr>
      <tr>
        <th>21</th>
        <td>Germany</td>
        <td>85.90</td>
      </tr>
      <tr>
        <th>20</th>
        <td>France</td>
        <td>70.86</td>
      </tr>
      <tr>
        <th>27</th>
        <td>Israel</td>
        <td>56.22</td>
      </tr>
      <tr>
        <th>6</th>
        <td>Canada</td>
        <td>56.00</td>
      </tr>
      <tr>
        <th>1</th>
        <td>Australia</td>
        <td>48.84</td>
      </tr>
      <tr>
        <th>5</th>
        <td>Brazil</td>
        <td>34.13</td>
      </tr>
      <tr>
        <th>45</th>
        <td>South Korea</td>
        <td>31.34</td>
      </tr>
      <tr>
        <th>47</th>
        <td>Sweden</td>
        <td>29.42</td>
      </tr>
      <tr>
        <th>36</th>
        <td>Netherlands</td>
        <td>24.46</td>
      </tr>
      <tr>
        <th>35</th>
        <td>Mexico</td>
        <td>18.70</td>
      </tr>
      <tr>
        <th>19</th>
        <td>Finland</td>
        <td>14.91</td>
      </tr>
      <tr>
        <th>3</th>
        <td>Belgium</td>
        <td>11.95</td>
      </tr>
      <tr>
        <th>42</th>
        <td>Seychelles</td>
        <td>11.80</td>
      </tr>
      <tr>
        <th>26</th>
        <td>Ireland</td>
        <td>11.05</td>
      </tr>
      <tr>
        <th>29</th>
        <td>Japan</td>
        <td>10.82</td>
      </tr>
    </tbody>
  </table>
  </div>
  #+end_export

  #+begin_src jupyter-python
  plt.subplots(figsize=(12, 8), dpi=300)
  ax = sns.barplot(country_valuation_df,
                   y='Country',
                   x='Valuation ($B)',
                   hue='Country')
  for i in ax.containers:
      ax.bar_label(i, fmt='%.2f')
  plt.suptitle('Distribution of Valuations across Different Countries')
  plt.xlabel('Total Valuation ($B)')
  plt.ylabel('Countries')
  plt.grid(axis='x', alpha=0.75)
  plt.xscale('log')
  plt.show()
  #+end_src

  #+RESULTS:
  [[file:./.ob-jupyter/f05e6c0f46ae7c19abfd1eb84b0fa2c74da48689.png]]

**** Mean Distribution of Valuations across Different Countries

  #+begin_src jupyter-python
  fig, ax = plt.subplots(figsize=(12, 8), dpi=300)
  sns.boxplot(df[df['Country'].isin(country_valuation_df['Country'])],
              y='Country',
              x='Valuation ($B)',
              hue='Country',
              showfliers=False)
  plt.suptitle('Distribution of Valuations across Different Countries')
  ax.set(xlabel='Total Valuation ($B)',
         ylabel='Country')
  plt.grid(axis='x', alpha=0.7)
  plt.show()
  #+end_src

  #+RESULTS:
  [[file:./.ob-jupyter/14b2ea8e778390abd7e447fb2b3880a74531c52f.png]]

  #+begin_src jupyter-python
  mean_country_valuation_df = df[df['Country'].isin(country_valuation_df['Country'])].groupby('Country')['Valuation ($B)'].mean().reset_index().sort_values('Valuation ($B)', ascending=False).head(20)
  mean_country_valuation_df
  #+end_src

  #+RESULTS:
  #+begin_export html
  <div>
  <style scoped>
      .dataframe tbody tr th:only-of-type {
          vertical-align: middle;
      }

      .dataframe tbody tr th {
          vertical-align: top;
      }

      .dataframe thead th {
          text-align: right;
      }
  </style>
  <table border="1" class="dataframe">
    <thead>
      <tr style="text-align: right;">
        <th></th>
        <th>Country</th>
        <th>Valuation ($B)</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <th>14</th>
        <td>Seychelles</td>
        <td>5.900000</td>
      </tr>
      <tr>
        <th>15</th>
        <td>Singapore</td>
        <td>5.753750</td>
      </tr>
      <tr>
        <th>4</th>
        <td>China</td>
        <td>5.461765</td>
      </tr>
      <tr>
        <th>0</th>
        <td>Australia</td>
        <td>5.426667</td>
      </tr>
      <tr>
        <th>17</th>
        <td>Sweden</td>
        <td>4.903333</td>
      </tr>
      <tr>
        <th>1</th>
        <td>Belgium</td>
        <td>3.983333</td>
      </tr>
      <tr>
        <th>19</th>
        <td>United States</td>
        <td>3.748743</td>
      </tr>
      <tr>
        <th>5</th>
        <td>Finland</td>
        <td>3.727500</td>
      </tr>
      <tr>
        <th>18</th>
        <td>United Kingdom</td>
        <td>3.588182</td>
      </tr>
      <tr>
        <th>7</th>
        <td>Germany</td>
        <td>2.770968</td>
      </tr>
      <tr>
        <th>13</th>
        <td>Netherlands</td>
        <td>2.717778</td>
      </tr>
      <tr>
        <th>3</th>
        <td>Canada</td>
        <td>2.666667</td>
      </tr>
      <tr>
        <th>6</th>
        <td>France</td>
        <td>2.530714</td>
      </tr>
      <tr>
        <th>8</th>
        <td>India</td>
        <td>2.530441</td>
      </tr>
      <tr>
        <th>10</th>
        <td>Israel</td>
        <td>2.444348</td>
      </tr>
      <tr>
        <th>16</th>
        <td>South Korea</td>
        <td>2.410769</td>
      </tr>
      <tr>
        <th>12</th>
        <td>Mexico</td>
        <td>2.337500</td>
      </tr>
      <tr>
        <th>2</th>
        <td>Brazil</td>
        <td>1.896111</td>
      </tr>
      <tr>
        <th>9</th>
        <td>Ireland</td>
        <td>1.578571</td>
      </tr>
      <tr>
        <th>11</th>
        <td>Japan</td>
        <td>1.352500</td>
      </tr>
    </tbody>
  </table>
  </div>
  #+end_export

  #+begin_src jupyter-python
  plt.figure(figsize=(12, 8), dpi=300)
  ax = sns.barplot(mean_country_valuation_df,
                   y='Country',
                   x='Valuation ($B)',
                   hue='Country')
  for i in ax.containers:
      ax.bar_label(i, fmt='%.2f')
  plt.suptitle('Mean Distribution of Valuations across Different Countries')
  plt.xlabel('Mean Valuation ($B)')
  plt.ylabel('Countries')
  plt.grid(axis='x', alpha=0.75)
  plt.show()
  #+end_src

  #+RESULTS:
  [[file:./.ob-jupyter/b32085f51b1c934f8ac141a341760533bb7014fb.png]]

**** Distribution of Valuations by Number of Companies
  #+begin_src jupyter-python
  # Define the bins for valuation ranges
  bins = [0, 1, 1.5, 2, 3, 4, 5, 6, 8, 10, 20, 30, 50, 100, 200, 300, 400]
  labels =  [f'{a}-{b}' for a, b in zip(bins[:-1], bins[1:])]
  cuts = pd.cut(df['Valuation ($B)'], bins=bins, labels=labels)

  # Count the number of companies in each bin
  valuation_distribution = cuts.value_counts().sort_index()

  # Plot the Bar Chart
  plt.figure(figsize=(12, 6), dpi=300)
  ax = sns.barplot(x=valuation_distribution.index,
                   y=valuation_distribution.values, hue=valuation_distribution.values)
  for i in ax.containers:
      ax.bar_label(i)
  plt.suptitle('Distribution of Valuations by Number of Companies')
  plt.xlabel('Valuation ($B)')
  plt.ylabel('Number of Companies')
  plt.xticks(rotation=45)
  plt.grid(axis='y', alpha=0.75)
  #plt.yscale('log')
  plt.show()
  #+end_src

  #+RESULTS:
  [[file:./.ob-jupyter/c11e15d352b3ed98f9ef5a451d66283761e0521b.png]]

*** Funding
**** Distribution of Funding across Different Industries

  #+begin_src jupyter-python
  industry_funding_df = df.groupby('Industry')['Funding ($B)'].sum().reset_index().sort_values('Funding ($B)', ascending=False)
  industry_funding_df
  #+end_src

  #+RESULTS:
  #+begin_export html
  <div>
  <style scoped>
      .dataframe tbody tr th:only-of-type {
          vertical-align: middle;
      }

      .dataframe tbody tr th {
          vertical-align: top;
      }

      .dataframe thead th {
          text-align: right;
      }
  </style>
  <table border="1" class="dataframe">
    <thead>
      <tr style="text-align: right;">
        <th></th>
        <th>Industry</th>
        <th>Funding ($B)</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <th>1</th>
        <td>Enterprise Tech</td>
        <td>254.609</td>
      </tr>
      <tr>
        <th>2</th>
        <td>Financial Services</td>
        <td>128.215</td>
      </tr>
      <tr>
        <th>4</th>
        <td>Industrials</td>
        <td>122.847</td>
      </tr>
      <tr>
        <th>0</th>
        <td>Consumer &amp; Retail</td>
        <td>116.818</td>
      </tr>
      <tr>
        <th>3</th>
        <td>Healthcare &amp; Life Sciences</td>
        <td>59.958</td>
      </tr>
      <tr>
        <th>6</th>
        <td>Media &amp; Entertainment</td>
        <td>49.003</td>
      </tr>
      <tr>
        <th>5</th>
        <td>Insurance</td>
        <td>13.096</td>
      </tr>
    </tbody>
  </table>
  </div>
  #+end_export

  #+begin_src jupyter-python
  plt.figure(figsize=(12, 6), dpi=300)
  ax = sns.barplot(industry_funding_df,
              y='Industry', x='Funding ($B)', hue='Industry')
  for i in ax.containers:
      ax.bar_label(i, fmt='%.2f')
  plt.suptitle('Distribution of Funding across Different Industries')
  plt.xlabel('Total Funding ($B)')
  plt.ylabel('Industry')
  plt.grid(axis='x', alpha=0.75)
  #+end_src

  #+RESULTS:
  [[file:./.ob-jupyter/51c4d8a9a32ca8c1203e36b04ad2e32a8ca58214.png]]

**** Mean Distribution of Funding across Different Industries

  #+begin_src jupyter-python
  fig, ax = plt.subplots(figsize=(12, 6), dpi=300)
  sns.boxplot(df, y='Industry', x='Funding ($M)', hue='Industry', showfliers=False)
  plt.suptitle('Distribution of Funding across Different Industries')
  ax.set(xlabel='Total Funding ($M)',
         ylabel='Industry')
  plt.grid(axis='x', alpha=0.7)
  plt.show()
  #+end_src

  #+RESULTS:
  [[file:./.ob-jupyter/ce120bcc0a8df946a8aa05155ef6bccacb68dad9.png]]

  #+begin_src jupyter-python
  industry_funding_df = df.groupby('Industry')['Funding ($M)'].mean().reset_index().sort_values('Funding ($M)', ascending=False)
  industry_funding_df
  #+end_src

  #+RESULTS:
  #+begin_export html
  <div>
  <style scoped>
      .dataframe tbody tr th:only-of-type {
          vertical-align: middle;
      }

      .dataframe tbody tr th {
          vertical-align: top;
      }

      .dataframe thead th {
          text-align: right;
      }
  </style>
  <table border="1" class="dataframe">
    <thead>
      <tr style="text-align: right;">
        <th></th>
        <th>Industry</th>
        <th>Funding ($M)</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <th>4</th>
        <td>Industrials</td>
        <td>671.295082</td>
      </tr>
      <tr>
        <th>1</th>
        <td>Enterprise Tech</td>
        <td>628.664198</td>
      </tr>
      <tr>
        <th>0</th>
        <td>Consumer &amp; Retail</td>
        <td>578.306933</td>
      </tr>
      <tr>
        <th>6</th>
        <td>Media &amp; Entertainment</td>
        <td>576.505882</td>
      </tr>
      <tr>
        <th>2</th>
        <td>Financial Services</td>
        <td>567.323009</td>
      </tr>
      <tr>
        <th>5</th>
        <td>Insurance</td>
        <td>523.840000</td>
      </tr>
      <tr>
        <th>3</th>
        <td>Healthcare &amp; Life Sciences</td>
        <td>508.118644</td>
      </tr>
    </tbody>
  </table>
  </div>
  #+end_export

  #+begin_src jupyter-python
  plt.figure(figsize=(12, 6), dpi=300)
  ax = sns.barplot(industry_funding_df,
                   y='Industry',
                   x='Funding ($M)',
                   hue='Industry')
  for i in ax.containers:
      ax.bar_label(i, fmt='%.2f')
  plt.suptitle('Distribution of Funding across Different Industries')
  plt.xlabel('Mean Funding ($M)')
  plt.ylabel('Industry')
  plt.grid(axis='x', alpha=0.75)
  plt.show()
  #+end_src

  #+RESULTS:
  [[file:./.ob-jupyter/a19a57cb164cf145e18296570c84ce993e852311.png]]

**** Distribution of Funding across Different Countries

  #+begin_src jupyter-python
  country_funding_df = df.groupby('Country')['Funding ($B)'].sum().reset_index().sort_values('Funding ($B)', ascending=False).head(20)
  country_funding_df
  #+end_src

  #+RESULTS:
  #+begin_export html
  <div>
  <style scoped>
      .dataframe tbody tr th:only-of-type {
          vertical-align: middle;
      }

      .dataframe tbody tr th {
          vertical-align: top;
      }

      .dataframe thead th {
          text-align: right;
      }
  </style>
  <table border="1" class="dataframe">
    <thead>
      <tr style="text-align: right;">
        <th></th>
        <th>Country</th>
        <th>Funding ($B)</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <th>53</th>
        <td>United States</td>
        <td>402.858</td>
      </tr>
      <tr>
        <th>10</th>
        <td>China</td>
        <td>119.010</td>
      </tr>
      <tr>
        <th>24</th>
        <td>India</td>
        <td>44.207</td>
      </tr>
      <tr>
        <th>52</th>
        <td>United Kingdom</td>
        <td>34.566</td>
      </tr>
      <tr>
        <th>21</th>
        <td>Germany</td>
        <td>23.249</td>
      </tr>
      <tr>
        <th>20</th>
        <td>France</td>
        <td>15.458</td>
      </tr>
      <tr>
        <th>43</th>
        <td>Singapore</td>
        <td>11.893</td>
      </tr>
      <tr>
        <th>5</th>
        <td>Brazil</td>
        <td>10.591</td>
      </tr>
      <tr>
        <th>47</th>
        <td>Sweden</td>
        <td>10.433</td>
      </tr>
      <tr>
        <th>6</th>
        <td>Canada</td>
        <td>9.817</td>
      </tr>
      <tr>
        <th>27</th>
        <td>Israel</td>
        <td>8.695</td>
      </tr>
      <tr>
        <th>45</th>
        <td>South Korea</td>
        <td>4.607</td>
      </tr>
      <tr>
        <th>35</th>
        <td>Mexico</td>
        <td>4.268</td>
      </tr>
      <tr>
        <th>25</th>
        <td>Indonesia</td>
        <td>3.617</td>
      </tr>
      <tr>
        <th>1</th>
        <td>Australia</td>
        <td>3.475</td>
      </tr>
      <tr>
        <th>36</th>
        <td>Netherlands</td>
        <td>2.865</td>
      </tr>
      <tr>
        <th>11</th>
        <td>Colombia</td>
        <td>2.659</td>
      </tr>
      <tr>
        <th>23</th>
        <td>Hong Kong</td>
        <td>2.399</td>
      </tr>
      <tr>
        <th>29</th>
        <td>Japan</td>
        <td>2.347</td>
      </tr>
      <tr>
        <th>46</th>
        <td>Spain</td>
        <td>2.212</td>
      </tr>
    </tbody>
  </table>
  </div>
  #+end_export

  #+begin_src jupyter-python
  plt.figure(figsize=(12, 8), dpi=300)
  ax = sns.barplot(country_funding_df, y='Country', x='Funding ($B)', hue='Country')
  for i in ax.containers:
      ax.bar_label(i, fmt='%.2f')
  plt.suptitle('Distribution of Funding across Different Countries')
  plt.xlabel('Funding ($B)')
  plt.ylabel('Countries')
  plt.grid(axis='x', alpha=0.75)
  plt.xscale('log')
  plt.show()
  #+end_src

  #+RESULTS:
  [[file:./.ob-jupyter/6c0f4abb81549409122bd27d4fea332be17ab66a.png]]

**** Mean Distribution of Funding across Different Countries
  #+begin_src jupyter-python
  fig, ax = plt.subplots(figsize=(12,8), dpi=300)
  sns.boxplot(df[df['Country'].isin(country_funding_df['Country'])], y='Country', x='Funding ($M)', hue='Country', showfliers=False)
  plt.suptitle('Distribution of Funding across Different Countries')
  ax.set(xlabel='Funding ($M)',
         ylabel='Country')
  plt.grid(axis='x', alpha=0.7)
  plt.show()
  #+end_src

  #+RESULTS:
  [[file:./.ob-jupyter/9661b37f23fd037b29b57cb5c30fd4b898431222.png]]

  #+begin_src jupyter-python
  mean_country_funding_df = df[df['Country'].isin(country_funding_df['Country'])].groupby('Country')['Funding ($M)'].mean().reset_index().sort_values('Funding ($M)', ascending=False).head(20)
  mean_country_funding_df
  #+end_src

  #+RESULTS:
  #+begin_export html
  <div>
  <style scoped>
      .dataframe tbody tr th:only-of-type {
          vertical-align: middle;
      }

      .dataframe tbody tr th {
          vertical-align: top;
      }

      .dataframe thead th {
          text-align: right;
      }
  </style>
  <table border="1" class="dataframe">
    <thead>
      <tr style="text-align: right;">
        <th></th>
        <th>Country</th>
        <th>Funding ($M)</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <th>17</th>
        <td>Sweden</td>
        <td>1738.833333</td>
      </tr>
      <tr>
        <th>4</th>
        <td>Colombia</td>
        <td>886.333333</td>
      </tr>
      <tr>
        <th>3</th>
        <td>China</td>
        <td>777.843137</td>
      </tr>
      <tr>
        <th>6</th>
        <td>Germany</td>
        <td>749.967742</td>
      </tr>
      <tr>
        <th>14</th>
        <td>Singapore</td>
        <td>743.312500</td>
      </tr>
      <tr>
        <th>8</th>
        <td>India</td>
        <td>650.102941</td>
      </tr>
      <tr>
        <th>18</th>
        <td>United Kingdom</td>
        <td>628.472727</td>
      </tr>
      <tr>
        <th>19</th>
        <td>United States</td>
        <td>588.973684</td>
      </tr>
      <tr>
        <th>1</th>
        <td>Brazil</td>
        <td>588.388889</td>
      </tr>
      <tr>
        <th>5</th>
        <td>France</td>
        <td>552.071429</td>
      </tr>
      <tr>
        <th>12</th>
        <td>Mexico</td>
        <td>533.500000</td>
      </tr>
      <tr>
        <th>9</th>
        <td>Indonesia</td>
        <td>516.714286</td>
      </tr>
      <tr>
        <th>2</th>
        <td>Canada</td>
        <td>467.476190</td>
      </tr>
      <tr>
        <th>16</th>
        <td>Spain</td>
        <td>442.400000</td>
      </tr>
      <tr>
        <th>0</th>
        <td>Australia</td>
        <td>386.111111</td>
      </tr>
      <tr>
        <th>10</th>
        <td>Israel</td>
        <td>378.043497</td>
      </tr>
      <tr>
        <th>15</th>
        <td>South Korea</td>
        <td>354.384615</td>
      </tr>
      <tr>
        <th>7</th>
        <td>Hong Kong</td>
        <td>342.714286</td>
      </tr>
      <tr>
        <th>13</th>
        <td>Netherlands</td>
        <td>318.333333</td>
      </tr>
      <tr>
        <th>11</th>
        <td>Japan</td>
        <td>293.375000</td>
      </tr>
    </tbody>
  </table>
  </div>
  #+end_export

  #+begin_src jupyter-python
  plt.figure(figsize=(12, 8), dpi=300)
  ax = sns.barplot(mean_country_funding_df,
                   y='Country',
                   x='Funding ($M)',
                   hue='Country')
  for i in ax.containers:
      ax.bar_label(i, fmt='%.2f')
  plt.suptitle('Mean Distribution of Funding across Different Countries')
  plt.xlabel('Mean Funding ($M)')
  plt.ylabel('Countries')
  plt.grid(axis='x', alpha=0.75)
  plt.show()
  #+end_src

  #+RESULTS:
  [[file:./.ob-jupyter/e9fd9611e3e328320e295fff8c6f23a770b5ac70.png]]

**** Distribution of Funding by Number of Companies

  #+begin_src jupyter-python
    # Define the bins for funding ranges
    # bins = [0, 0.2, 0.3, 0.5, 0.8, 1, 2, 4, 6, 8, 10, 12, 15, 20]
    # labels =  [f'{a}-{b}' for a, b in zip(bins[:-1], bins[1:])]
    bins = [0,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,1000,1500,2000,4000,6000,8000,10000,15000,20000]
    labels =  [f'{a}-{b}' for a, b in zip(bins[:-1], bins[1:])]
    cuts = pd.cut(df['Funding ($M)'], bins=bins, labels=labels)

    # Count the number of companies in each bin
    funding_distribution = cuts.value_counts().sort_index()

    # Plot the Bar Chart
    plt.figure(figsize=(12, 6), dpi=300)
    ax = sns.barplot(x=funding_distribution.index,
                     y=funding_distribution.values, hue=funding_distribution.values)
    for i in ax.containers:
        ax.bar_label(i)
    plt.suptitle('Distribution of Funding by Number of Companies')
    plt.xlabel('Funding ($M)')
    plt.ylabel('Number of Companies')
    plt.xticks(rotation=90)
    plt.grid(axis='y', alpha=0.75)
    # plt.yscale('log')
    plt.show()
  #+end_src

  #+RESULTS:
  [[file:./.ob-jupyter/99f2eeea3301d67ae9cd9b09636a97e4944d898f.png]]

* Comparative Analysis
** Top Companies by Valuation

  #+begin_src jupyter-python
  top_companies = df.sort_values(by='Latest Valuation ($B)', ascending=False).head(20)
  top_companies
  #+end_src

  #+RESULTS:
  #+begin_export html
  <div>
  <style scoped>
      .dataframe tbody tr th:only-of-type {
          vertical-align: middle;
      }

      .dataframe tbody tr th {
          vertical-align: top;
      }

      .dataframe thead th {
          text-align: right;
      }
  </style>
  <table border="1" class="dataframe">
    <thead>
      <tr style="text-align: right;">
        <th></th>
        <th>Company</th>
        <th>Valuation ($B)</th>
        <th>Total Equity Funding ($)</th>
        <th>Unicorn Date</th>
        <th>Date Founded</th>
        <th>Years to Unicorn</th>
        <th>Industry</th>
        <th>Country</th>
        <th>City</th>
        <th>Select Investors</th>
        <th>Valuation ($)</th>
        <th>Unicorn Year</th>
        <th>Funding ($B)</th>
        <th>Funding ($M)</th>
        <th>Investors</th>
        <th>Years to Unicorn (Months)</th>
        <th>Years to Unicorn (Converted)</th>
        <th>Latest Valuation ($B)</th>
        <th>Founder(s)</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <th>0</th>
        <td>SpaceX</td>
        <td>350.00</td>
        <td>9000000000</td>
        <td>2012-12-01</td>
        <td>2002</td>
        <td>10y3m</td>
        <td>Enterprise Tech</td>
        <td>United States</td>
        <td>Hawthorne</td>
        <td>Opus Capital, RRE Ventures, Relay Ventures</td>
        <td>3.500000e+11</td>
        <td>2012</td>
        <td>9.000</td>
        <td>9000.0</td>
        <td>[Opus Capital, RRE Ventures, Relay Ventures]</td>
        <td>123</td>
        <td>10.250000</td>
        <td>350.00</td>
        <td>[Elon Musk]</td>
      </tr>
      <tr>
        <th>1</th>
        <td>ByteDance</td>
        <td>300.00</td>
        <td>8000000000</td>
        <td>2017-04-07</td>
        <td>2011</td>
        <td>6y3m</td>
        <td>Enterprise Tech</td>
        <td>China</td>
        <td>Beijing</td>
        <td>Breyer Capital, Parkway VC, TIME Ventures</td>
        <td>3.000000e+11</td>
        <td>2017</td>
        <td>8.000</td>
        <td>8000.0</td>
        <td>[Breyer Capital, Parkway VC, TIME Ventures]</td>
        <td>75</td>
        <td>6.250000</td>
        <td>315.00</td>
        <td>[Zhang Yiming, Liang Rubo]</td>
      </tr>
      <tr>
        <th>2</th>
        <td>OpenAI</td>
        <td>157.00</td>
        <td>18000000000</td>
        <td>2019-07-22</td>
        <td>2015</td>
        <td>4y6m</td>
        <td>Industrials</td>
        <td>United States</td>
        <td>San Francisco</td>
        <td>Dynamo VC, Susa Ventures, Founders Fund</td>
        <td>1.570000e+11</td>
        <td>2019</td>
        <td>18.000</td>
        <td>18000.0</td>
        <td>[Dynamo VC, Susa Ventures, Founders Fund]</td>
        <td>54</td>
        <td>4.500000</td>
        <td>300.00</td>
        <td>[Sam Altman, Greg Brockman, Ilya Sutskever]</td>
      </tr>
      <tr>
        <th>3</th>
        <td>Ant Group</td>
        <td>150.00</td>
        <td>19000000000</td>
        <td>2017-01-01</td>
        <td>2014</td>
        <td>3y</td>
        <td>Financial Services</td>
        <td>China</td>
        <td>Hangzhou</td>
        <td>Alibaba Group, CPP Investments, The Carlyle Group</td>
        <td>1.500000e+11</td>
        <td>2017</td>
        <td>19.000</td>
        <td>19000.0</td>
        <td>[Alibaba Group, CPP Investments, The Carlyle G...</td>
        <td>36</td>
        <td>3.000000</td>
        <td>150.00</td>
        <td>NaN</td>
      </tr>
      <tr>
        <th>7</th>
        <td>xAI</td>
        <td>50.00</td>
        <td>12000000000</td>
        <td>2024-05-26</td>
        <td>2006</td>
        <td>18y4m</td>
        <td>Consumer &amp; Retail</td>
        <td>United States</td>
        <td>Burlingame</td>
        <td>Prysm Capital, Baillie Gifford &amp; Co., TDM Grow...</td>
        <td>5.000000e+10</td>
        <td>2024</td>
        <td>12.000</td>
        <td>12000.0</td>
        <td>[Prysm Capital, Baillie Gifford &amp; Co., TDM Gro...</td>
        <td>220</td>
        <td>18.333333</td>
        <td>113.00</td>
        <td>[Elon Musk]</td>
      </tr>
      <tr>
        <th>4</th>
        <td>Stripe</td>
        <td>70.00</td>
        <td>9000000000</td>
        <td>2014-01-23</td>
        <td>2009</td>
        <td>5y</td>
        <td>Consumer &amp; Retail</td>
        <td>United States</td>
        <td>San Francisco</td>
        <td>Sequoia Capital China, ZhenFund, K2 Ventures</td>
        <td>7.000000e+10</td>
        <td>2014</td>
        <td>9.000</td>
        <td>9000.0</td>
        <td>[Sequoia Capital China, ZhenFund, K2 Ventures]</td>
        <td>60</td>
        <td>5.000000</td>
        <td>91.50</td>
        <td>[Patrick, John Collison]</td>
      </tr>
      <tr>
        <th>5</th>
        <td>SHEIN</td>
        <td>66.00</td>
        <td>4000000000</td>
        <td>2018-07-03</td>
        <td>2008</td>
        <td>10y6m</td>
        <td>Financial Services</td>
        <td>Singapore</td>
        <td>Singapore</td>
        <td>369 Growth Partners, GTM Capital, Berkeley Hil...</td>
        <td>6.600000e+10</td>
        <td>2018</td>
        <td>4.000</td>
        <td>4000.0</td>
        <td>[369 Growth Partners, GTM Capital, Berkeley Hi...</td>
        <td>126</td>
        <td>10.500000</td>
        <td>66.00</td>
        <td>NaN</td>
      </tr>
      <tr>
        <th>6</th>
        <td>Databricks</td>
        <td>62.00</td>
        <td>14000000000</td>
        <td>2019-02-05</td>
        <td>2013</td>
        <td>6y1m</td>
        <td>Industrials</td>
        <td>United States</td>
        <td>San Francisco</td>
        <td>Holtzbrinck Ventures, Unternehmertum Venture C...</td>
        <td>6.200000e+10</td>
        <td>2019</td>
        <td>14.000</td>
        <td>14000.0</td>
        <td>[Holtzbrinck Ventures, Unternehmertum Venture ...</td>
        <td>73</td>
        <td>6.083333</td>
        <td>62.00</td>
        <td>[Ali Ghodsi]</td>
      </tr>
      <tr>
        <th>16</th>
        <td>Anthropic</td>
        <td>16.05</td>
        <td>8000000000</td>
        <td>2023-02-03</td>
        <td>2021</td>
        <td>2y2m</td>
        <td>Enterprise Tech</td>
        <td>United States</td>
        <td>San Francisco</td>
        <td>New Enterprise Associates, Institutional Ventu...</td>
        <td>1.605000e+10</td>
        <td>2023</td>
        <td>8.000</td>
        <td>8000.0</td>
        <td>[New Enterprise Associates, Institutional Vent...</td>
        <td>26</td>
        <td>2.166667</td>
        <td>61.50</td>
        <td>[Dario Amodei]</td>
      </tr>
      <tr>
        <th>150</th>
        <td>Safe Superintelligence</td>
        <td>5.00</td>
        <td>1000000000</td>
        <td>2024-09-04</td>
        <td>1995</td>
        <td>29y8m</td>
        <td>Consumer &amp; Retail</td>
        <td>United States</td>
        <td>San Francisco</td>
        <td>General Catalyst, Inspired Capital, Flybridge ...</td>
        <td>5.000000e+09</td>
        <td>2024</td>
        <td>1.000</td>
        <td>1000.0</td>
        <td>[General Catalyst, Inspired Capital, Flybridge...</td>
        <td>356</td>
        <td>29.666667</td>
        <td>32.00</td>
        <td>[Ilya Sutskever, Daniel Gross, Daniel Levy]</td>
      </tr>
      <tr>
        <th>9</th>
        <td>Canva</td>
        <td>32.00</td>
        <td>580000000</td>
        <td>2018-01-08</td>
        <td>2012</td>
        <td>6y</td>
        <td>Healthcare &amp; Life Sciences</td>
        <td>Australia</td>
        <td>Surry Hills</td>
        <td>Index Ventures, Temasek, Portag3 Ventures</td>
        <td>3.200000e+10</td>
        <td>2018</td>
        <td>0.580</td>
        <td>580.0</td>
        <td>[Index Ventures, Temasek, Portag3 Ventures]</td>
        <td>72</td>
        <td>6.000000</td>
        <td>32.00</td>
        <td>[Melanie Perkins, Clifford Obrecht, Cameron Ad...</td>
      </tr>
      <tr>
        <th>13</th>
        <td>Epic Games</td>
        <td>22.50</td>
        <td>8000000000</td>
        <td>2018-10-26</td>
        <td>1991</td>
        <td>27y9m</td>
        <td>Financial Services</td>
        <td>United States</td>
        <td>Cary</td>
        <td>Warburg Pincus, The Rise Fund, HarbourVest Par...</td>
        <td>2.250000e+10</td>
        <td>2018</td>
        <td>8.000</td>
        <td>8000.0</td>
        <td>[Warburg Pincus, The Rise Fund, HarbourVest Pa...</td>
        <td>333</td>
        <td>27.750000</td>
        <td>31.50</td>
        <td>[Tim Sweeney]</td>
      </tr>
      <tr>
        <th>26</th>
        <td>Scale AI</td>
        <td>13.80</td>
        <td>2000000000</td>
        <td>2019-08-05</td>
        <td>2016</td>
        <td>3y7m</td>
        <td>Financial Services</td>
        <td>United States</td>
        <td>San Francisco</td>
        <td>Accel,Y Combinator, Index Ventures, Founders Fund</td>
        <td>1.380000e+10</td>
        <td>2019</td>
        <td>2.000</td>
        <td>2000.0</td>
        <td>[Accel,Y Combinator, Index Ventures, Founders ...</td>
        <td>43</td>
        <td>3.583333</td>
        <td>29.00</td>
        <td>[Alexandr Wang, Lucy Guo]</td>
      </tr>
      <tr>
        <th>10</th>
        <td>Fanatics</td>
        <td>31.00</td>
        <td>5000000000</td>
        <td>2012-06-06</td>
        <td>2011</td>
        <td>1y5m</td>
        <td>Financial Services</td>
        <td>United States</td>
        <td>Jacksonville</td>
        <td>Liberty City Ventures, RRE Ventures, Mithril C...</td>
        <td>3.100000e+10</td>
        <td>2012</td>
        <td>5.000</td>
        <td>5000.0</td>
        <td>[Liberty City Ventures, RRE Ventures, Mithril ...</td>
        <td>17</td>
        <td>1.416667</td>
        <td>27.00</td>
        <td>[Alan Trager, Mitch Trager, Michael Rubin[34]]</td>
      </tr>
      <tr>
        <th>11</th>
        <td>Chime</td>
        <td>25.00</td>
        <td>2000000000</td>
        <td>2019-03-05</td>
        <td>2012</td>
        <td>7y2m</td>
        <td>Enterprise Tech</td>
        <td>United States</td>
        <td>San Francisco</td>
        <td>Blackstone, ICONIQ Growth, General Atlantic</td>
        <td>2.500000e+10</td>
        <td>2019</td>
        <td>2.000</td>
        <td>2000.0</td>
        <td>[Blackstone, ICONIQ Growth, General Atlantic]</td>
        <td>86</td>
        <td>7.166667</td>
        <td>25.00</td>
        <td>[Chris Britt, Ryan King]</td>
      </tr>
      <tr>
        <th>12</th>
        <td>CoreWeave</td>
        <td>23.00</td>
        <td>2000000000</td>
        <td>2023-04-20</td>
        <td>2019</td>
        <td>4y3m</td>
        <td>Healthcare &amp; Life Sciences</td>
        <td>United States</td>
        <td>Roseland</td>
        <td>The Column Group, Foresite Capital, Foresite C...</td>
        <td>2.300000e+10</td>
        <td>2023</td>
        <td>2.000</td>
        <td>2000.0</td>
        <td>[The Column Group, Foresite Capital, Foresite ...</td>
        <td>51</td>
        <td>4.250000</td>
        <td>23.00</td>
        <td>NaN</td>
      </tr>
      <tr>
        <th>8</th>
        <td>Revolut</td>
        <td>45.00</td>
        <td>2000000000</td>
        <td>2018-04-26</td>
        <td>2015</td>
        <td>3y3m</td>
        <td>Insurance</td>
        <td>United Kingdom</td>
        <td>London</td>
        <td>CMFG Ventures, Accomplice, Moderne Ventures</td>
        <td>4.500000e+10</td>
        <td>2018</td>
        <td>2.000</td>
        <td>2000.0</td>
        <td>[CMFG Ventures, Accomplice, Moderne Ventures]</td>
        <td>39</td>
        <td>3.250000</td>
        <td>17.75</td>
        <td>[Nikolay Storonsky, Vlad Yatsenko]</td>
      </tr>
      <tr>
        <th>14</th>
        <td>Miro</td>
        <td>17.50</td>
        <td>476000000</td>
        <td>2022-01-05</td>
        <td>2012</td>
        <td>1y0m</td>
        <td>Healthcare &amp; Life Sciences</td>
        <td>United States</td>
        <td>San Francisco</td>
        <td>Sequoia Capital China, China Life Investment H...</td>
        <td>1.750000e+10</td>
        <td>2022</td>
        <td>0.476</td>
        <td>476.0</td>
        <td>[Sequoia Capital China, China Life Investment ...</td>
        <td>12</td>
        <td>1.000000</td>
        <td>17.50</td>
        <td>[Andrey Khusid]</td>
      </tr>
      <tr>
        <th>1119</th>
        <td>Nature's Fynd</td>
        <td>1.00</td>
        <td>463000000</td>
        <td>2021-07-19</td>
        <td>2009</td>
        <td>12y6m</td>
        <td>Media &amp; Entertainment</td>
        <td>United States</td>
        <td>Chicago</td>
        <td>Lightspeed Venture Partners, Access Industries...</td>
        <td>1.000000e+09</td>
        <td>2021</td>
        <td>0.463</td>
        <td>463.0</td>
        <td>[Lightspeed Venture Partners, Access Industrie...</td>
        <td>150</td>
        <td>12.500000</td>
        <td>17.00</td>
        <td>[Thomas Jonas, Mark Kozubal, Yuval Avniel, Ric...</td>
      </tr>
      <tr>
        <th>17</th>
        <td>Yuanfudao</td>
        <td>15.50</td>
        <td>4000000000</td>
        <td>2017-05-31</td>
        <td>2012</td>
        <td>5y4m</td>
        <td>Enterprise Tech</td>
        <td>China</td>
        <td>Beijing</td>
        <td>Craft Ventures, F-Prime Capital, Sound Ventures</td>
        <td>1.550000e+10</td>
        <td>2017</td>
        <td>4.000</td>
        <td>4000.0</td>
        <td>[Craft Ventures, F-Prime Capital, Sound Ventures]</td>
        <td>64</td>
        <td>5.333333</td>
        <td>15.50</td>
        <td>[Yong Li]</td>
      </tr>
    </tbody>
  </table>
  </div>
  #+end_export

  #+begin_src jupyter-python
  # Set the positions and width for the bars
  N = len(top_companies)
  ind = np.arange(N)  # the x locations for the groups
  width = 0.35  # the width of the bars

  # Create the bars for valuation and funding
  fig, ax = plt.subplots(figsize=(12, 6), dpi=300)
  bars1 = ax.bar(ind, top_companies['Valuation ($B)'], width, label='2024')
  bars2 = ax.bar(ind + width, top_companies['Latest Valuation ($B)'], width, label='2025')

  # Add labels and title
  ax.set(xlabel='Companies',
         ylabel='Valuation ($B)')
  ax.set_xticks(ind+width/2, top_companies['Company'], rotation=45, ha='right')
  ax.legend()
  ax.grid(axis='y', alpha=0.75)
  plt.suptitle('Top Companies by Valuation')
  plt.show()
  #+end_src

  #+RESULTS:
  [[file:./.ob-jupyter/069b79734eb467d49ab273df855942140939aa9a.png]]

** Most-Funded Companies

  #+begin_src jupyter-python
  df_filtered = df[df['Funding ($M)']>2000].sort_values(by='Funding ($M)', ascending=False).head(30)
  df_filtered
  #+end_src

  #+RESULTS:
  #+begin_export html
  <div>
  <style scoped>
      .dataframe tbody tr th:only-of-type {
          vertical-align: middle;
      }

      .dataframe tbody tr th {
          vertical-align: top;
      }

      .dataframe thead th {
          text-align: right;
      }
  </style>
  <table border="1" class="dataframe">
    <thead>
      <tr style="text-align: right;">
        <th></th>
        <th>Company</th>
        <th>Valuation ($B)</th>
        <th>Total Equity Funding ($)</th>
        <th>Unicorn Date</th>
        <th>Date Founded</th>
        <th>Years to Unicorn</th>
        <th>Industry</th>
        <th>Country</th>
        <th>City</th>
        <th>Select Investors</th>
        <th>Valuation ($)</th>
        <th>Unicorn Year</th>
        <th>Funding ($B)</th>
        <th>Funding ($M)</th>
        <th>Investors</th>
        <th>Years to Unicorn (Months)</th>
        <th>Years to Unicorn (Converted)</th>
        <th>Latest Valuation ($B)</th>
        <th>Founder(s)</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <th>3</th>
        <td>Ant Group</td>
        <td>150.00</td>
        <td>19000000000</td>
        <td>2017-01-01</td>
        <td>2014</td>
        <td>3y</td>
        <td>Financial Services</td>
        <td>China</td>
        <td>Hangzhou</td>
        <td>Alibaba Group, CPP Investments, The Carlyle Group</td>
        <td>1.500000e+11</td>
        <td>2017</td>
        <td>19.0</td>
        <td>19000.0</td>
        <td>[Alibaba Group, CPP Investments, The Carlyle G...</td>
        <td>36</td>
        <td>3.000000</td>
        <td>150.00</td>
        <td>NaN</td>
      </tr>
      <tr>
        <th>2</th>
        <td>OpenAI</td>
        <td>157.00</td>
        <td>18000000000</td>
        <td>2019-07-22</td>
        <td>2015</td>
        <td>4y6m</td>
        <td>Industrials</td>
        <td>United States</td>
        <td>San Francisco</td>
        <td>Dynamo VC, Susa Ventures, Founders Fund</td>
        <td>1.570000e+11</td>
        <td>2019</td>
        <td>18.0</td>
        <td>18000.0</td>
        <td>[Dynamo VC, Susa Ventures, Founders Fund]</td>
        <td>54</td>
        <td>4.500000</td>
        <td>300.00</td>
        <td>[Sam Altman, Greg Brockman, Ilya Sutskever]</td>
      </tr>
      <tr>
        <th>38</th>
        <td>JUUL Labs</td>
        <td>12.00</td>
        <td>15000000000</td>
        <td>2017-12-20</td>
        <td>2011</td>
        <td>6y11m</td>
        <td>Enterprise Tech</td>
        <td>United States</td>
        <td>San Francisco</td>
        <td>Boxin Capital, DT Capital Partners, IDG Capital</td>
        <td>1.200000e+10</td>
        <td>2017</td>
        <td>15.0</td>
        <td>15000.0</td>
        <td>[Boxin Capital, DT Capital Partners, IDG Capital]</td>
        <td>83</td>
        <td>6.916667</td>
        <td>5.00</td>
        <td>NaN</td>
      </tr>
      <tr>
        <th>6</th>
        <td>Databricks</td>
        <td>62.00</td>
        <td>14000000000</td>
        <td>2019-02-05</td>
        <td>2013</td>
        <td>6y1m</td>
        <td>Industrials</td>
        <td>United States</td>
        <td>San Francisco</td>
        <td>Holtzbrinck Ventures, Unternehmertum Venture C...</td>
        <td>6.200000e+10</td>
        <td>2019</td>
        <td>14.0</td>
        <td>14000.0</td>
        <td>[Holtzbrinck Ventures, Unternehmertum Venture ...</td>
        <td>73</td>
        <td>6.083333</td>
        <td>62.00</td>
        <td>[Ali Ghodsi]</td>
      </tr>
      <tr>
        <th>7</th>
        <td>xAI</td>
        <td>50.00</td>
        <td>12000000000</td>
        <td>2024-05-26</td>
        <td>2006</td>
        <td>18y4m</td>
        <td>Consumer &amp; Retail</td>
        <td>United States</td>
        <td>Burlingame</td>
        <td>Prysm Capital, Baillie Gifford &amp; Co., TDM Grow...</td>
        <td>5.000000e+10</td>
        <td>2024</td>
        <td>12.0</td>
        <td>12000.0</td>
        <td>[Prysm Capital, Baillie Gifford &amp; Co., TDM Gro...</td>
        <td>220</td>
        <td>18.333333</td>
        <td>113.00</td>
        <td>[Elon Musk]</td>
      </tr>
      <tr>
        <th>0</th>
        <td>SpaceX</td>
        <td>350.00</td>
        <td>9000000000</td>
        <td>2012-12-01</td>
        <td>2002</td>
        <td>10y3m</td>
        <td>Enterprise Tech</td>
        <td>United States</td>
        <td>Hawthorne</td>
        <td>Opus Capital, RRE Ventures, Relay Ventures</td>
        <td>3.500000e+11</td>
        <td>2012</td>
        <td>9.0</td>
        <td>9000.0</td>
        <td>[Opus Capital, RRE Ventures, Relay Ventures]</td>
        <td>123</td>
        <td>10.250000</td>
        <td>350.00</td>
        <td>[Elon Musk]</td>
      </tr>
      <tr>
        <th>4</th>
        <td>Stripe</td>
        <td>70.00</td>
        <td>9000000000</td>
        <td>2014-01-23</td>
        <td>2009</td>
        <td>5y</td>
        <td>Consumer &amp; Retail</td>
        <td>United States</td>
        <td>San Francisco</td>
        <td>Sequoia Capital China, ZhenFund, K2 Ventures</td>
        <td>7.000000e+10</td>
        <td>2014</td>
        <td>9.0</td>
        <td>9000.0</td>
        <td>[Sequoia Capital China, ZhenFund, K2 Ventures]</td>
        <td>60</td>
        <td>5.000000</td>
        <td>91.50</td>
        <td>[Patrick, John Collison]</td>
      </tr>
      <tr>
        <th>1</th>
        <td>ByteDance</td>
        <td>300.00</td>
        <td>8000000000</td>
        <td>2017-04-07</td>
        <td>2011</td>
        <td>6y3m</td>
        <td>Enterprise Tech</td>
        <td>China</td>
        <td>Beijing</td>
        <td>Breyer Capital, Parkway VC, TIME Ventures</td>
        <td>3.000000e+11</td>
        <td>2017</td>
        <td>8.0</td>
        <td>8000.0</td>
        <td>[Breyer Capital, Parkway VC, TIME Ventures]</td>
        <td>75</td>
        <td>6.250000</td>
        <td>315.00</td>
        <td>[Zhang Yiming, Liang Rubo]</td>
      </tr>
      <tr>
        <th>13</th>
        <td>Epic Games</td>
        <td>22.50</td>
        <td>8000000000</td>
        <td>2018-10-26</td>
        <td>1991</td>
        <td>27y9m</td>
        <td>Financial Services</td>
        <td>United States</td>
        <td>Cary</td>
        <td>Warburg Pincus, The Rise Fund, HarbourVest Par...</td>
        <td>2.250000e+10</td>
        <td>2018</td>
        <td>8.0</td>
        <td>8000.0</td>
        <td>[Warburg Pincus, The Rise Fund, HarbourVest Pa...</td>
        <td>333</td>
        <td>27.750000</td>
        <td>31.50</td>
        <td>[Tim Sweeney]</td>
      </tr>
      <tr>
        <th>16</th>
        <td>Anthropic</td>
        <td>16.05</td>
        <td>8000000000</td>
        <td>2023-02-03</td>
        <td>2021</td>
        <td>2y2m</td>
        <td>Enterprise Tech</td>
        <td>United States</td>
        <td>San Francisco</td>
        <td>New Enterprise Associates, Institutional Ventu...</td>
        <td>1.605000e+10</td>
        <td>2023</td>
        <td>8.0</td>
        <td>8000.0</td>
        <td>[New Enterprise Associates, Institutional Vent...</td>
        <td>26</td>
        <td>2.166667</td>
        <td>61.50</td>
        <td>[Dario Amodei]</td>
      </tr>
      <tr>
        <th>44</th>
        <td>Global Switch</td>
        <td>11.10</td>
        <td>5000000000</td>
        <td>2016-12-22</td>
        <td>1998</td>
        <td>19y2m</td>
        <td>Enterprise Tech</td>
        <td>United Kingdom</td>
        <td>London</td>
        <td>Jiangsu Shagang Group, IDC, Barclays, Credit S...</td>
        <td>1.110000e+10</td>
        <td>2016</td>
        <td>5.0</td>
        <td>5000.0</td>
        <td>[Jiangsu Shagang Group, IDC, Barclays, Credit ...</td>
        <td>230</td>
        <td>19.166667</td>
        <td>11.10</td>
        <td>NaN</td>
      </tr>
      <tr>
        <th>10</th>
        <td>Fanatics</td>
        <td>31.00</td>
        <td>5000000000</td>
        <td>2012-06-06</td>
        <td>2011</td>
        <td>1y5m</td>
        <td>Financial Services</td>
        <td>United States</td>
        <td>Jacksonville</td>
        <td>Liberty City Ventures, RRE Ventures, Mithril C...</td>
        <td>3.100000e+10</td>
        <td>2012</td>
        <td>5.0</td>
        <td>5000.0</td>
        <td>[Liberty City Ventures, RRE Ventures, Mithril ...</td>
        <td>17</td>
        <td>1.416667</td>
        <td>27.00</td>
        <td>[Alan Trager, Mitch Trager, Michael Rubin[34]]</td>
      </tr>
      <tr>
        <th>42</th>
        <td>BYJU's</td>
        <td>11.50</td>
        <td>5000000000</td>
        <td>2017-07-25</td>
        <td>2011</td>
        <td>7y8m</td>
        <td>Healthcare &amp; Life Sciences</td>
        <td>India</td>
        <td>Bengaluru</td>
        <td>Greylock Partners, Venrock, Providence Ventures</td>
        <td>1.150000e+10</td>
        <td>2017</td>
        <td>5.0</td>
        <td>5000.0</td>
        <td>[Greylock Partners, Venrock, Providence Ventures]</td>
        <td>92</td>
        <td>7.666667</td>
        <td>11.50</td>
        <td>NaN</td>
      </tr>
      <tr>
        <th>40</th>
        <td>Xingsheng Selected</td>
        <td>12.00</td>
        <td>5000000000</td>
        <td>2020-07-22</td>
        <td>2009</td>
        <td>11y6m</td>
        <td>Media &amp; Entertainment</td>
        <td>China</td>
        <td>Changsha</td>
        <td>Temasek, Guggenheim Investments, Qatar Investm...</td>
        <td>1.200000e+10</td>
        <td>2020</td>
        <td>5.0</td>
        <td>5000.0</td>
        <td>[Temasek, Guggenheim Investments, Qatar Invest...</td>
        <td>138</td>
        <td>11.500000</td>
        <td>12.00</td>
        <td>NaN</td>
      </tr>
      <tr>
        <th>48</th>
        <td>Chehaoduo</td>
        <td>10.00</td>
        <td>4000000000</td>
        <td>2016-03-12</td>
        <td>2014</td>
        <td>2y2m</td>
        <td>Healthcare &amp; Life Sciences</td>
        <td>China</td>
        <td>Beijing</td>
        <td>China Health Industry Investment Fund, China R...</td>
        <td>1.000000e+10</td>
        <td>2016</td>
        <td>4.0</td>
        <td>4000.0</td>
        <td>[China Health Industry Investment Fund, China ...</td>
        <td>26</td>
        <td>2.166667</td>
        <td>10.00</td>
        <td>NaN</td>
      </tr>
      <tr>
        <th>60</th>
        <td>Northvolt</td>
        <td>9.08</td>
        <td>4000000000</td>
        <td>2019-06-12</td>
        <td>2016</td>
        <td>3y5m</td>
        <td>Industrials</td>
        <td>Sweden</td>
        <td>Stockholm</td>
        <td>Aqua-Spark, Wavemaker Partners, Peak XV Partners</td>
        <td>9.080000e+09</td>
        <td>2019</td>
        <td>4.0</td>
        <td>4000.0</td>
        <td>[Aqua-Spark, Wavemaker Partners, Peak XV Partn...</td>
        <td>41</td>
        <td>3.416667</td>
        <td>11.75</td>
        <td>[Peter Carlsson, Paolo Cerrutim, Harald Mix, C...</td>
      </tr>
      <tr>
        <th>213</th>
        <td>Hozon Auto</td>
        <td>3.95</td>
        <td>4000000000</td>
        <td>2022-02-22</td>
        <td>2009</td>
        <td>12y1m</td>
        <td>Media &amp; Entertainment</td>
        <td>China</td>
        <td>Shanghai</td>
        <td>Yichun Jinheng Equity Investments, Nanning Min...</td>
        <td>3.950000e+09</td>
        <td>2022</td>
        <td>4.0</td>
        <td>4000.0</td>
        <td>[Yichun Jinheng Equity Investments, Nanning Mi...</td>
        <td>145</td>
        <td>12.083333</td>
        <td>3.95</td>
        <td>NaN</td>
      </tr>
      <tr>
        <th>24</th>
        <td>Anduril</td>
        <td>14.00</td>
        <td>4000000000</td>
        <td>2019-09-11</td>
        <td>2017</td>
        <td>2y8m</td>
        <td>Enterprise Tech</td>
        <td>United States</td>
        <td>Irvine</td>
        <td>Norwest Venture Partners, Goldman Sachs, Dell ...</td>
        <td>1.400000e+10</td>
        <td>2019</td>
        <td>4.0</td>
        <td>4000.0</td>
        <td>[Norwest Venture Partners, Goldman Sachs, Dell...</td>
        <td>32</td>
        <td>2.666667</td>
        <td>14.00</td>
        <td>NaN</td>
      </tr>
      <tr>
        <th>23</th>
        <td>Klarna</td>
        <td>14.50</td>
        <td>4000000000</td>
        <td>2011-12-12</td>
        <td>2005</td>
        <td>9y2m</td>
        <td>Enterprise Tech</td>
        <td>Sweden</td>
        <td>Stockholm</td>
        <td>OneVentures, AirTree Ventures, AMP New Ventures</td>
        <td>1.450000e+10</td>
        <td>2011</td>
        <td>4.0</td>
        <td>4000.0</td>
        <td>[OneVentures, AirTree Ventures, AMP New Ventures]</td>
        <td>110</td>
        <td>9.166667</td>
        <td>6.50</td>
        <td>[Sebastian Siemiatkowski, Niklas Adalberth, Vi...</td>
      </tr>
      <tr>
        <th>17</th>
        <td>Yuanfudao</td>
        <td>15.50</td>
        <td>4000000000</td>
        <td>2017-05-31</td>
        <td>2012</td>
        <td>5y4m</td>
        <td>Enterprise Tech</td>
        <td>China</td>
        <td>Beijing</td>
        <td>Craft Ventures, F-Prime Capital, Sound Ventures</td>
        <td>1.550000e+10</td>
        <td>2017</td>
        <td>4.0</td>
        <td>4000.0</td>
        <td>[Craft Ventures, F-Prime Capital, Sound Ventures]</td>
        <td>64</td>
        <td>5.333333</td>
        <td>15.50</td>
        <td>[Yong Li]</td>
      </tr>
      <tr>
        <th>5</th>
        <td>SHEIN</td>
        <td>66.00</td>
        <td>4000000000</td>
        <td>2018-07-03</td>
        <td>2008</td>
        <td>10y6m</td>
        <td>Financial Services</td>
        <td>Singapore</td>
        <td>Singapore</td>
        <td>369 Growth Partners, GTM Capital, Berkeley Hil...</td>
        <td>6.600000e+10</td>
        <td>2018</td>
        <td>4.0</td>
        <td>4000.0</td>
        <td>[369 Growth Partners, GTM Capital, Berkeley Hi...</td>
        <td>126</td>
        <td>10.500000</td>
        <td>66.00</td>
        <td>NaN</td>
      </tr>
      <tr>
        <th>20</th>
        <td>Gopuff</td>
        <td>15.00</td>
        <td>3000000000</td>
        <td>2020-10-08</td>
        <td>2013</td>
        <td>7y9m</td>
        <td>Financial Services</td>
        <td>United States</td>
        <td>Philadelphia</td>
        <td>RRE Ventures, Tiger Global, August Capital</td>
        <td>1.500000e+10</td>
        <td>2020</td>
        <td>3.0</td>
        <td>3000.0</td>
        <td>[RRE Ventures, Tiger Global, August Capital]</td>
        <td>93</td>
        <td>7.750000</td>
        <td>15.00</td>
        <td>NaN</td>
      </tr>
      <tr>
        <th>62</th>
        <td>OYO Rooms</td>
        <td>9.00</td>
        <td>3000000000</td>
        <td>2018-09-25</td>
        <td>2012</td>
        <td>6y8m</td>
        <td>Consumer &amp; Retail</td>
        <td>India</td>
        <td>Gurugram</td>
        <td>Tencent Holdings, Tiger Global Management, Glo...</td>
        <td>9.000000e+09</td>
        <td>2018</td>
        <td>3.0</td>
        <td>3000.0</td>
        <td>[Tencent Holdings, Tiger Global Management, Gl...</td>
        <td>80</td>
        <td>6.666667</td>
        <td>9.00</td>
        <td>NaN</td>
      </tr>
      <tr>
        <th>95</th>
        <td>SVOLT</td>
        <td>6.51</td>
        <td>3000000000</td>
        <td>2020-06-08</td>
        <td>2010</td>
        <td>10y5m</td>
        <td>Consumer &amp; Retail</td>
        <td>China</td>
        <td>Changzhou</td>
        <td>QiMing Venture Partners, Temasek Holdings, Sil...</td>
        <td>6.510000e+09</td>
        <td>2020</td>
        <td>3.0</td>
        <td>3000.0</td>
        <td>[QiMing Venture Partners, Temasek Holdings, Si...</td>
        <td>125</td>
        <td>10.416667</td>
        <td>6.51</td>
        <td>NaN</td>
      </tr>
      <tr>
        <th>294</th>
        <td>FlixMobility</td>
        <td>3.00</td>
        <td>3000000000</td>
        <td>2019-07-18</td>
        <td>2013</td>
        <td>6y6m</td>
        <td>Consumer &amp; Retail</td>
        <td>Germany</td>
        <td>Munich</td>
        <td>Knox Lane, Ainge Advisory, Carlson Private Cap...</td>
        <td>3.000000e+09</td>
        <td>2019</td>
        <td>3.0</td>
        <td>3000.0</td>
        <td>[Knox Lane, Ainge Advisory, Carlson Private Ca...</td>
        <td>78</td>
        <td>6.500000</td>
        <td>2.00</td>
        <td>NaN</td>
      </tr>
      <tr>
        <th>322</th>
        <td>Zuoyebang</td>
        <td>3.00</td>
        <td>3000000000</td>
        <td>2018-07-18</td>
        <td>2015</td>
        <td>5y8m</td>
        <td>Enterprise Tech</td>
        <td>China</td>
        <td>Beijing</td>
        <td>Google Ventures, Accel, Data Collective</td>
        <td>3.000000e+09</td>
        <td>2018</td>
        <td>3.0</td>
        <td>3000.0</td>
        <td>[Google Ventures, Accel, Data Collective]</td>
        <td>68</td>
        <td>5.666667</td>
        <td>1.00</td>
        <td>NaN</td>
      </tr>
      <tr>
        <th>491</th>
        <td>Magic Leap</td>
        <td>2.00</td>
        <td>3000000000</td>
        <td>2014-10-21</td>
        <td>2011</td>
        <td>3y9m</td>
        <td>Enterprise Tech</td>
        <td>United States</td>
        <td>Plantation</td>
        <td>Scale Venture Partners, Sapphire Ventures, Bat...</td>
        <td>2.000000e+09</td>
        <td>2014</td>
        <td>3.0</td>
        <td>3000.0</td>
        <td>[Scale Venture Partners, Sapphire Ventures, Ba...</td>
        <td>45</td>
        <td>3.750000</td>
        <td>4.50</td>
        <td>NaN</td>
      </tr>
      <tr>
        <th>51</th>
        <td>Huolala</td>
        <td>10.00</td>
        <td>2400000000</td>
        <td>2019-02-21</td>
        <td>2016</td>
        <td>3y1m</td>
        <td>Industrials</td>
        <td>China</td>
        <td>Guangzhou</td>
        <td>Fifty Years Fund, Refactor Capital, Temasek</td>
        <td>1.000000e+10</td>
        <td>2019</td>
        <td>2.4</td>
        <td>2400.0</td>
        <td>[Fifty Years Fund, Refactor Capital, Temasek]</td>
        <td>37</td>
        <td>3.083333</td>
        <td>10.00</td>
        <td>NaN</td>
      </tr>
    </tbody>
  </table>
  </div>
  #+end_export

  #+begin_src jupyter-python
  plt.subplots(figsize=(12, 8), dpi=300)
  ax = sns.barplot(df_filtered, y='Company', x='Funding ($M)', hue='Company')
  for i in ax.containers:
      ax.bar_label(i)
  plt.suptitle('Companies Received Most Funding')
  plt.xlabel('Amount ($M)')
  plt.grid(axis='x', alpha=0.75)
  plt.show()
  #+end_src

  #+RESULTS:
  [[file:./.ob-jupyter/984cac3a4f902bd2d1f5c43df35aa8e933f7515a.png]]
** Top Countries

  #+begin_src jupyter-python
  _df = df.groupby('Country')['Valuation ($B)']\
          .agg(['count', 'sum'])\
          .sort_values(by='sum', ascending=False)\
          .head(30)
  fig, ax = plt.subplots(2, 1, figsize=(12, 8), dpi=300, sharex=True)
  g = sns.barplot(_df, x=_df.index, y='sum', hue=_df.index, ax=ax[0])
  g.set(ylabel='Valuation ($B)',
        yscale='log')
  for i in ax[0].containers:
      ax[0].bar_label(i, rotation=45, fontsize=8)
  g = sns.barplot(_df, x=_df.index, y='count', hue=_df.index, ax=ax[1])
  g.set(ylabel='Number of Companies',
        yscale='log')
  for i in ax[1].containers:
      ax[1].bar_label(i, rotation=45, fontsize=8)
  plt.suptitle('Top Countries')
  plt.grid(axis='y', alpha=0.75)
  plt.xticks(rotation=45, ha='right')
  plt.xlabel(None)
  plt.show()
  #+end_src

  #+RESULTS:
  [[file:./.ob-jupyter/cce0f0b71ca561669c24ebf1cad4bd2fcd44456b.png]]

** Top Countries across Different Industries

  #+begin_src jupyter-python
  top_countries = df\
      .groupby('Country')['Valuation ($B)']\
      .sum()\
      .sort_values(ascending=False)\
      .head(10)\
      .index
  df_filtered =  df[df['Country'].isin(top_countries)]\
      .groupby(['Country', 'Industry'])['Valuation ($B)']\
      .agg(['count', 'sum'])\
      .reset_index()
  #+end_src

  #+RESULTS:



  #+begin_src jupyter-python
  fig, ax = plt.subplots(2, 1, figsize=(12, 8), dpi=300, sharex=True)
  g = sns.barplot(df_filtered, x='Country', y='sum', hue='Industry', ax=ax[0])
  sns.move_legend(ax[0], 'upper left', bbox_to_anchor=(1, .55), frameon=False)
  g.set(ylabel='Valuation ($B)',
        yscale='log')
  for i in ax[0].containers:
      ax[0].bar_label(i, rotation=45, fontsize=8, fmt='%d')
  g = sns.barplot(df_filtered, x='Country', y='count', hue='Industry', ax=ax[1], legend=False)
  g.set(ylabel='Number of Companies',
        yscale='log')
  for i in ax[1].containers:
      ax[1].bar_label(i, rotation=45, fontsize=8)
  plt.suptitle('Top Countries across Different Industries')
  plt.grid(axis='y', alpha=0.75)
  plt.xticks(rotation=45, ha='right')
  plt.xlabel(None)
  plt.show()
  #+end_src

  #+RESULTS:
  [[file:./.ob-jupyter/1fdb98eab7befc2f6ddca637c1f03af7301b2181.png]]

* Time-Based Analysis
** Unicorn Growth Over Time

  #+begin_src jupyter-python
  _df = df.groupby('Unicorn Year').size().reset_index(name='Count')
  _df['Accumulated Count'] = _df['Count'].cumsum()
  _df
  #+end_src

  #+RESULTS:
  #+begin_export html
  <div>
  <style scoped>
      .dataframe tbody tr th:only-of-type {
          vertical-align: middle;
      }

      .dataframe tbody tr th {
          vertical-align: top;
      }

      .dataframe thead th {
          text-align: right;
      }
  </style>
  <table border="1" class="dataframe">
    <thead>
      <tr style="text-align: right;">
        <th></th>
        <th>Unicorn Year</th>
        <th>Count</th>
        <th>Accumulated Count</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <th>0</th>
        <td>2007</td>
        <td>1</td>
        <td>1</td>
      </tr>
      <tr>
        <th>1</th>
        <td>2011</td>
        <td>1</td>
        <td>2</td>
      </tr>
      <tr>
        <th>2</th>
        <td>2012</td>
        <td>4</td>
        <td>6</td>
      </tr>
      <tr>
        <th>3</th>
        <td>2013</td>
        <td>4</td>
        <td>10</td>
      </tr>
      <tr>
        <th>4</th>
        <td>2014</td>
        <td>9</td>
        <td>19</td>
      </tr>
      <tr>
        <th>5</th>
        <td>2015</td>
        <td>32</td>
        <td>51</td>
      </tr>
      <tr>
        <th>6</th>
        <td>2016</td>
        <td>17</td>
        <td>68</td>
      </tr>
      <tr>
        <th>7</th>
        <td>2017</td>
        <td>35</td>
        <td>103</td>
      </tr>
      <tr>
        <th>8</th>
        <td>2018</td>
        <td>83</td>
        <td>186</td>
      </tr>
      <tr>
        <th>9</th>
        <td>2019</td>
        <td>85</td>
        <td>271</td>
      </tr>
      <tr>
        <th>10</th>
        <td>2020</td>
        <td>91</td>
        <td>362</td>
      </tr>
      <tr>
        <th>11</th>
        <td>2021</td>
        <td>484</td>
        <td>846</td>
      </tr>
      <tr>
        <th>12</th>
        <td>2022</td>
        <td>252</td>
        <td>1098</td>
      </tr>
      <tr>
        <th>13</th>
        <td>2023</td>
        <td>68</td>
        <td>1166</td>
      </tr>
      <tr>
        <th>14</th>
        <td>2024</td>
        <td>78</td>
        <td>1244</td>
      </tr>
    </tbody>
  </table>
  </div>
  #+end_export

  #+begin_src jupyter-python
  plt.subplots(figsize=(12, 6), dpi=300)
  sns.barplot(_df, x='Unicorn Year', y='Count', hue='Count')
  plt.plot(_df['Accumulated Count'], marker='o', linestyle='dashed')
  plt.suptitle('Unicorn Growth Over Time')
  plt.xlabel('Year')
  plt.ylabel('Number of Unicorns')
  plt.grid(axis='y', alpha=0.7)
  plt.show()
  #+end_src

  #+RESULTS:
  [[file:./.ob-jupyter/ff8edde5f695a3cb82aff1ed443c31af9a3ebb8a.png]]

  The surge of unicorns was reported as [[https://pitchbook.com/news/articles/us-unicorns-2021-venture-capital-valuations]["meteoric"]] for 2021, with $71 billion invested in 340 new companies, a banner year for startups and for the US venture capital industry; the unprecedented number of companies valued at more than $1 billion during 2021 exceeded the sum total of the five previous years.

*** COMMENT By Industry

  #+begin_src jupyter-python
  grouped_df = df.groupby(['Unicorn Year', 'Industry']).size().reset_index(name='Count')
  grouped_df
  #+end_src

  #+RESULTS:
  #+begin_export html
  <div>
  <style scoped>
      .dataframe tbody tr th:only-of-type {
          vertical-align: middle;
      }

      .dataframe tbody tr th {
          vertical-align: top;
      }

      .dataframe thead th {
          text-align: right;
      }
  </style>
  <table border="1" class="dataframe">
    <thead>
      <tr style="text-align: right;">
        <th></th>
        <th>Unicorn Year</th>
        <th>Industry</th>
        <th>Count</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <th>0</th>
        <td>2007</td>
        <td>Healthcare &amp; Life Sciences</td>
        <td>1</td>
      </tr>
      <tr>
        <th>1</th>
        <td>2011</td>
        <td>Enterprise Tech</td>
        <td>1</td>
      </tr>
      <tr>
        <th>2</th>
        <td>2012</td>
        <td>Enterprise Tech</td>
        <td>2</td>
      </tr>
      <tr>
        <th>3</th>
        <td>2012</td>
        <td>Financial Services</td>
        <td>1</td>
      </tr>
      <tr>
        <th>4</th>
        <td>2012</td>
        <td>Industrials</td>
        <td>1</td>
      </tr>
      <tr>
        <th>...</th>
        <td>...</td>
        <td>...</td>
        <td>...</td>
      </tr>
      <tr>
        <th>72</th>
        <td>2024</td>
        <td>Financial Services</td>
        <td>13</td>
      </tr>
      <tr>
        <th>73</th>
        <td>2024</td>
        <td>Healthcare &amp; Life Sciences</td>
        <td>7</td>
      </tr>
      <tr>
        <th>74</th>
        <td>2024</td>
        <td>Industrials</td>
        <td>10</td>
      </tr>
      <tr>
        <th>75</th>
        <td>2024</td>
        <td>Insurance</td>
        <td>2</td>
      </tr>
      <tr>
        <th>76</th>
        <td>2024</td>
        <td>Media &amp; Entertainment</td>
        <td>8</td>
      </tr>
    </tbody>
  </table>
  <p>77 rows × 3 columns</p>
  </div>
  #+end_export

  #+begin_src jupyter-python
  plt.subplots(figsize=(12, 6), dpi=300)
  sns.kdeplot(data=grouped_df, x='Unicorn Year', weights='Count', hue='Industry', fill=False)
  plt.suptitle('Number of Companies by Industry')
  plt.xlabel('Year')
  plt.ylabel('Density of Companies')
  plt.legend(title='Industry')
  plt.grid()
  plt.show()
  #+end_src

  #+RESULTS:
  :RESULTS:
  : /tmp/ipykernel_8701/3217005228.py:6: UserWarning: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.
  :   plt.legend(title='Industry')
  [[file:./.ob-jupyter/950daf4d988cd10a302f3819ef8497b6d546919c.png]]
  :END:

** Time to Unicorn

  #+begin_src jupyter-python
  # Calculate 5th and 95th percentiles
  lower_bound = df['Years to Unicorn (Converted)'].quantile(0.05)
  upper_bound = df['Years to Unicorn (Converted)'].quantile(0.95)
  # Filter out values outside the 5th and 95th percentiles
  df_filtered = df[(df['Years to Unicorn (Converted)'] >= lower_bound) & (df['Years to Unicorn (Converted)'] <= upper_bound)]

  fig, ax = plt.subplots(2, 1, figsize=(12, 8), dpi=300)
  sns.boxplot(df_filtered, x='Years to Unicorn (Converted)', y='Industry', hue='Industry', ax=ax[0], showfliers=False)
  ax[0].set(xlabel=None)
  sns.histplot(df_filtered['Years to Unicorn (Converted)'].dropna(), bins=300, ax=ax[1])
  ax[1].set(xlabel='Years', ylabel='Number of Companies')
  plt.suptitle('Distribution of Time to Unicorn')
  plt.grid(alpha=0.75)
  plt.show()
  #+end_src

  #+RESULTS:
  [[file:./.ob-jupyter/c7cd9fcbaaac53a19187d40c369039deca5e636e.png]]

** Distribution of Valuations Over Time

  #+begin_src jupyter-python
  plt.subplots(figsize=(12, 6), dpi=300)
  sns.scatterplot(df, x='Unicorn Date', y='Valuation ($B)', alpha=.6, hue='Industry')
  plt.suptitle('Distribution of Valuations Over Time')
  plt.xlabel('Date')
  plt.ylabel('Amount ($B)')
  # plt.xticks(df['Unicorn Year'].unique(), rotation=45)
  plt.grid(axis='y', alpha=0.5)
  plt.yscale('log')
  plt.show()
  #+end_src

  #+RESULTS:
  [[file:./.ob-jupyter/821b3da48fbab4df520bbc025505ea15795d912d.png]]

** Distribution of Funding Over Time

  #+begin_src jupyter-python
  plt.subplots(figsize=(12, 6), dpi=300)
  sns.scatterplot(df, x='Unicorn Date', y=df['Funding ($M)'], alpha=0.6, hue='Industry')
  plt.suptitle('Distribution of Funding Over Time')
  plt.xlabel('Date')
  plt.ylabel('Amount ($M)')
  # plt.xticks(df['Unicorn Year'].unique(), rotation=45)
  plt.grid(axis='y', alpha=0.5)
  # plt.yscale('log')
  plt.show()
  #+end_src

  #+RESULTS:
  [[file:./.ob-jupyter/115cbb444c4bf38e74a55b52151a20a7f74a7c94.png]]

* Correlation Analysis
** Relationship between Funding and Valuation

  #+begin_src jupyter-python
  df_filtered = df[(df['Total Equity Funding ($)'] >= df['Total Equity Funding ($)'].quantile(0.05)) &
                   (df['Total Equity Funding ($)'] <= df['Total Equity Funding ($)'].quantile(0.95)) &
                   (df['Valuation ($)'] >= df['Valuation ($)'].quantile(0.05)) &
                   (df['Valuation ($)'] <= df['Valuation ($)'].quantile(0.95))]

  plt.subplots(figsize=(12, 8), dpi=300)
  sns.scatterplot(df_filtered, x='Total Equity Funding ($)', y='Valuation ($)', alpha=0.6, hue='Industry')
  # sns.jointplot(df_filtered, x='Total Equity Funding ($)', y='Valuation ($)', kind='reg', truncate=False, height=7)
  plt.suptitle('Relationship between Funding and Valuation')
  plt.xlabel('Funding ($)')
  plt.ylabel('Valuation ($)')
  plt.grid(True)
  plt.xscale('log')
  # plt.yscale('log')
  plt.show()
  #+end_src

  #+RESULTS:
  [[file:./.ob-jupyter/84f67eec0c55e7952a662cbbde663e93138f33cd.png]]
** Relationship between Time to Unicorn and Valuation

  #+begin_src jupyter-python
  # Filter out values outside the 5th and 95th percentiles
  df_filtered = df[(df['Years to Unicorn (Converted)'] >= df['Years to Unicorn (Converted)'].quantile(0.05)) &
                   (df['Years to Unicorn (Converted)'] <= df['Years to Unicorn (Converted)'].quantile(0.95)) &
                   (df['Valuation ($)'] >= df['Valuation ($)'].quantile(0.05)) &
                   (df['Valuation ($)'] <= df['Valuation ($)'].quantile(0.95))]

  plt.subplots(figsize=(12, 8), dpi=300)
  sns.scatterplot(df, x=df_filtered['Years to Unicorn (Converted)'], y=df['Valuation ($)'], alpha=0.6, hue='Industry')
  plt.suptitle('Relationship between Time to Unicorn and Valuation')
  plt.xlabel('Years')
  plt.ylabel('Valuation ($)')
  plt.grid(True)
  plt.yscale('log')
  plt.show()
  #+end_src

  #+RESULTS:
  [[file:./.ob-jupyter/2032a8d64f16288e463c3cccf2269a2f1009dd62.png]]
** COMMENT Heatmap

  #+begin_src jupyter-python
  plt.subplots(figsize=(12, 12), dpi=300)
  labels = ['Valuation', 'Funding', 'Years to Unicorn', 'Date Founded', 'Unicorn Year']
  sns.heatmap(df[['Valuation ($B)', 'Funding ($B)', 'Years to Unicorn (Converted)', 'Date Founded', 'Unicorn Year']].corr(),
              annot=True, xticklabels=labels, yticklabels=labels)
  plt.show()
  #+end_src

  #+RESULTS:
  [[file:./.ob-jupyter/af99a0e65576014542fc9aed62cbb3bcb59b94a1.png]]

* Investor Analysis
** Top Investors
  #+begin_src jupyter-python
  top_investors = df.explode('Investors')\
                    .groupby('Investors')['Latest Valuation ($B)']\
                    .agg(['count', 'sum'])\
                    .sort_values(by=['sum', 'count'], ascending=False)\
                    .head(50)
  print(top_investors)
  #+end_src

  #+RESULTS:
  #+begin_example
                                  count     sum
  Investors
  RRE Ventures                        5  397.60
  Founders Fund                      24  363.01
  Relay Ventures                      2  358.00
  Opus Capital                        2  355.70
  Breyer Capital                      5  320.16
  Parkway VC                          2  316.00
  TIME Ventures                       1  315.00
  Susa Ventures                       2  304.90
  Dynamo VC                           1  300.00
  Andreessen Horowitz                72  184.51
  Sequoia Capital China              40  183.61
  Sequoia Capital                    59  177.57
  Alibaba Group                       9  163.39
  Accel                              65  163.21
  New Enterprise Associates          26  158.00
  The Carlyle Group                   5  154.55
  CPP Investments                     1  150.00
  Tiger Global Management            56  144.53
  Index Ventures                     38  139.65
  General Atlantic                   30  138.95
  Lightspeed Venture Partners        42  121.19
  TDM Growth Partners                 2  121.00
  Insight Partners                   49  120.07
  Baillie Gifford & Co.               3  117.40
  Prysm Capital                       2  115.10
  General Catalyst                   41  113.46
  ZhenFund                            7  108.20
  K2 Ventures                         1   91.50
  Institutional Venture Partners     13   85.74
  Temasek                            10   74.58
  IDG Capital                        27   72.08
  Bessemer Venture Partners          32   71.36
  Tencent Holdings                   29   69.03
  Google Ventures                    28   68.81
  369 Growth Partners                 1   66.00
  Berkeley Hills Capital              1   66.00
  GTM Capital                         1   66.00
  Holtzbrinck Ventures                2   64.00
  Unternehmertum Venture Capital      1   62.00
  NVentures                           1   61.50
  SoftBank Group                     29   59.68
  Sequoia Capital India              23   57.97
  Coatue Management                  21   53.79
  Norwest Venture Partners           18   53.43
  Bain Capital Ventures              17   52.66
  Thrive Capital                     20   49.68
  Foresite Capital                    4   49.20
  CRV                                17   48.18
  Battery Ventures                   20   48.07
  Warburg Pincus                     10   46.37
  #+end_example

  #+begin_src jupyter-python
  fig, ax = plt.subplots(2, 1, figsize=(12, 8), dpi=300, sharex=True)

  sns.barplot(top_investors, ax=ax[0], y='sum', x=top_investors.index, hue=top_investors.index, legend=False)
  ax[0].set(ylabel='Valuations ($B)', title='Valuations of Invested Companies ($B)')

  sns.barplot(top_investors, ax=ax[1], y='count', x=top_investors.index, hue=top_investors.index, legend=False)
  ax[1].set(ylabel='Times Invested', title='Number of Companies Invested')

  plt.xticks(rotation=90)
  plt.suptitle('Top Investors')
  plt.show()
  #+end_src

  #+RESULTS:
  [[file:./.ob-jupyter/baa50a132771fbcaa1c91b732fafd3d88dfc659a.png]]

* Founder Analysis
** Top Founders
  #+begin_src jupyter-python
  top_founders = df.explode('Founder(s)')\
                    .groupby('Founder(s)')['Latest Valuation ($B)']\
                    .agg(['count', 'sum'])\
                    .sort_values(by=['sum', 'count'], ascending=False)\
                    .head(50)
  print(top_founders)
  #+end_src

  #+RESULTS:
  #+begin_example
                        count     sum
  Founder(s)
  Elon Musk                 3  468.70
  Ilya Sutskever            2  332.00
  Liang Rubo                1  315.00
  Zhang Yiming              1  315.00
  Greg Brockman             1  300.00
  Sam Altman                1  300.00
  John Collison             1   91.50
  Patrick                   1   91.50
  Ali Ghodsi                1   62.00
  Dario Amodei              1   61.50
  Cameron Adams             1   32.00
  Clifford Obrecht          1   32.00
  Daniel Gross              1   32.00
  Daniel Levy               1   32.00
  Melanie Perkins           1   32.00
  Tim Sweeney               1   31.50
  Alexandr Wang             1   29.00
  Lucy Guo                  1   29.00
  Alan Trager               1   27.00
  Michael Rubin[34]         1   27.00
  Mitch Trager              1   27.00
  Chris Britt               1   25.00
  Ryan King                 1   25.00
  Nikolay Storonsky         1   17.75
  Vlad Yatsenko             1   17.75
  Andrey Khusid             1   17.50
  Daniel Livny              1   17.00
  Mark Kozubal              1   17.00
  Matthew Strongin          1   17.00
  Rich Macur                1   17.00
  Thomas Jonas              1   17.00
  Yuval Avniel              1   17.00
  Markus Villig             2   16.80
  Yong Li                   1   15.50
  Jason Citron              1   15.00
  Stanislav Vishnevsky      1   15.00
  Charlwin Mao Wenchao      1   14.00
  Miranda Qu Fang           1   14.00
  William Hockey            1   13.40
  Zach Perret               1   13.40
  Alex Shevchenko           1   13.00
  Dmytro Lider              1   13.00
  Max Lytvyn,               1   13.00
  Todd Park                 1   12.60
  Max Rhodes                1   12.40
  Henrique Dubugras         1   12.30
  Pedro Franceschi          1   12.30
  Hayes Barnard             1   12.00
  Jason Walker              1   12.00
  Matt Dawson               1   12.00
  #+end_example

  #+begin_src jupyter-python
  fig, ax = plt.subplots(figsize=(12, 8), dpi=300, sharex=True)

  ax = sns.barplot(top_founders, y='sum', x=top_founders.index, hue='sum', legend=False)
  ax.set(ylabel='Company Valuations ($B)', xlabel='Founder')

  plt.xticks(rotation=90)
  plt.suptitle('Top Founders by Company Valuations')
  plt.show()
  #+end_src

  #+RESULTS:
  [[file:./.ob-jupyter/fe616e143b3cf0d9418694a18bba4589f67a6f38.png]]
* Historical Analysis
** Survival and Acquisition

- Find out companies no longer listed as unicorns in 2024

     #+begin_src jupyter-python
     df_2022 = pd.read_csv('input/datasets/Unicorn_Companies (March 2022).csv')
     df_2022['Valuation ($B)'] = pd.to_numeric(df_2022['Valuation ($B)'].str.replace('$', ''))
     df_exit = df_2022[~df_2022['Company'].str.lower().isin(df['Company'].str.lower())]
     #+end_src

     #+RESULTS:

     #+begin_src jupyter-python :exports results
     f'{len(df_exit.index)} companies no longer listed in 2024 unicorn list'
     #+end_src

     #+RESULTS:
     : 178 companies no longer listed in 2024 unicorn list

     #+begin_src jupyter-python
     print(df_exit.head())
     #+end_src

     #+RESULTS:
     #+begin_example
                        Company  Valuation ($B) Date Joined        Country           City                                Industry                                  Select Inverstors  Founded Year  \
     7                Instacart           39.00  12/30/2014  United States  San Francisco     Supply chain, logistics, & delivery  Khosla Ventures, Kleiner Perkins Caufield & By...        2012.0
     10                     FTX           32.00   7/20/2021        Bahamas        Fintech  Sequoia Capital, Thoma Bravo, Softbank                                                NaN        2018.0
     15             J&T Express           20.00    4/7/2021      Indonesia        Jakarta     Supply chain, logistics, & delivery  Hillhouse Capital Management, Boyu Capital, Se...        2015.0
     31  Biosplice Therapeutics           12.00    8/6/2018  United States      San Diego                                  Health           Vickers Venture Partners, IKEA GreenTech        2008.0
     39                 Weilong           10.88    5/8/2021          China          Luohe                       Consumer & retail  Tencent Holdings, Hillhouse Capital Management...           NaN

        Total Raised Financial Stage  Investors Count  Deal Terms  Portfolio Exits
     7       $2.686B             NaN             29.0        12.0              NaN
     10      $1.829B             Acq             40.0         3.0              1.0
     15      $4.653B             NaN              9.0         3.0              NaN
     31      $561.5M             NaN             10.0         1.0              NaN
     39     $559.74M             NaN              7.0         1.0              NaN
     #+end_example

- Financial Stage

     #+begin_src jupyter-python
     df_2022['Financial Stage'].value_counts()
     #+end_src

     #+RESULTS:
     #+begin_example
     Financial Stage
     Acquired       22
     Divestiture     8
     IPO             7
     Acq             7
     Asset           1
     Take            1
     Management      1
     Reverse         1
     Corporate       1
     Name: count, dtype: int64
     #+end_example

*** Top Exited Unicorns as of March 2022

   #+begin_src jupyter-python
   df_exit_top_companies = df_exit.sort_values('Valuation ($B)', ascending=False).head(20)
   # print(df_exit_top_companies)
   #+end_src

   #+RESULTS:

   

   #+begin_src jupyter-python
   plt.subplots(figsize=(12, 6), dpi=300)
   ax = sns.barplot(df_exit_top_companies,
                    x='Company',
                    y='Valuation ($B)',
                    hue='Company')
   for i in ax.containers:
       ax.bar_label(i)
   plt.suptitle('Top Exited Unicorns as of March 2022')
   plt.ylabel('Valuation ($B)')
   plt.xlabel('Company')
   plt.xticks(rotation=45, ha='right')
   plt.grid(axis='y', alpha=0.75)
   plt.show()
   #+end_src

   #+RESULTS:
   [[file:./.ob-jupyter/0cf21fd4dcde7853381d8001fdcd8e79c7051378.png]]


*** Exit Reasons of Former Unicorns

  #+begin_src jupyter-python
  _df = pd.read_csv('input/raw_data/list-of-unicorn-former-startups_20250619 (wikipedia).csv')
  _df['Company'] = _df['Company'].str.strip()
  def correct_exit_reasons(s):
      s = re.sub(r'\[.*\]', '', s)
      s= s.strip()
      if 'merge' in s.lower():
          return 'Merged'
      if 'acquire' in s.lower() or 'acquisition' in s.lower() or 'takeover' in s.lower():
          return 'Acquired'
      if 'devaluation' == s.lower():
          return 'Devalued'
      if 'direct listing' == s.lower():
          return 'IPO'
      return s
  _df['Exit reason'] = _df['Exit reason'].dropna().apply(correct_exit_reasons)
  # _df = _df[_df['Company'].str.lower().isin(df_exit['Company'].str.lower())]
  _df['Exit reason'].value_counts()
   #+end_src

   #+RESULTS:
   : Exit reason
   : IPO           128
   : Acquired       53
   : Merged         14
   : Defunct         3
   : Devalued        3
   : Bankruptcy      2
   : Name: count, dtype: int64

   #+begin_src jupyter-python
   exit_reasons = _df['Exit reason'].value_counts().reset_index(name='Count')
   # print(exit_reasons.index)
   plt.subplots(figsize=(12, 6), dpi=300)
   ax = sns.barplot(exit_reasons, x='Exit reason', y='Count', hue='Exit reason')
   for i in ax.containers:
       ax.bar_label(i)
   plt.suptitle('Exit Reasons of Former Unicorns')
   plt.show()
   #+end_src

   #+RESULTS:
   [[file:./.ob-jupyter/1537f115c5a981fb2d88c8f46fd7db4a48fc715a.png]]

* Funded by Y-Combinator

Y Combinator, founded in 2005 by Paul Graham and others, is a prestigious startup accelerator based in Silicon Valley that provides early-stage companies with seed funding, mentorship, and resources over a three-month program held twice a year. Startups receive initial funding in exchange for equity and culminate in a Demo Day where they pitch to investors. Y Combinator has launched successful companies like Airbnb, Dropbox, and Stripe, significantly impacting the startup ecosystem and inspiring numerous other accelerators globally.


# #+begin_src jupyter-python
# df_yc = pd.read_json('input/datasets/yc_startups.json')
# df_yc.info()
# #+end_src

- *Datasets*

  - *YC Campanies*

      #+begin_src jupyter-python
      df_yc_companies = pd.read_csv('input/datasets/2024 YCombinator All Companies Dataset/companies.csv')

      df_yc_industries = pd.read_csv('input/datasets/2024 YCombinator All Companies Dataset/industries.csv')
      df_yc_tags = pd.read_csv('input/datasets/2024 YCombinator All Companies Dataset/tags.csv')
      # print(df_yc_tags.groupby('id')['tag'].agg(list).reset_index())
      df_yc_companies = df_yc_companies.merge(df_yc_industries[['id', 'industry']].groupby('id')['industry'].agg(list).reset_index(), on='id', how='left')
      df_yc_companies = df_yc_companies.merge(df_yc_tags.groupby('id')['tag'].agg(list).reset_index(), on='id', how='left')
      df_yc_companies = df_yc_companies[['name', 'slug', 'oneLiner', 'website', 'smallLogoUrl', 'teamSize', 'tag', 'industry', 'batch']].rename(columns={
          'name': 'Company',
          'slug': 'Slug',
          'oneLiner': 'Short Description',
          'website': 'Website',
          'smallLogoUrl': 'Logo',
          'teamSize': 'Team Size',
          'tag': 'Tags',
          'industry': 'Industries',
          'batch': 'Batch'
      })
      print(df_yc_companies.info())
      #+end_src

      #+RESULTS:
      #+begin_example
      <class 'pandas.core.frame.DataFrame'>
      RangeIndex: 4844 entries, 0 to 4843
      Data columns (total 9 columns):
       #   Column             Non-Null Count  Dtype
      ---  ------             --------------  -----
       0   Company            4844 non-null   object
       1   Slug               4841 non-null   object
       2   Short Description  4692 non-null   object
       3   Website            4817 non-null   object
       4   Logo               4197 non-null   object
       5   Team Size          4766 non-null   float64
       6   Tags               4463 non-null   object
       7   Industries         4825 non-null   object
       8   Batch              4844 non-null   object
      dtypes: float64(1), object(8)
      memory usage: 340.7+ KB
      None
      #+end_example

      #+begin_src jupyter-python
      df2_yc_companies = pd.read_json('input/datasets/yc_startups.json')
      print(df2_yc_companies.info())
      #+end_src

      #+RESULTS:
      #+begin_example
      <class 'pandas.core.frame.DataFrame'>
      RangeIndex: 1000 entries, 0 to 999
      Data columns (total 12 columns):
       #   Column       Non-Null Count  Dtype
      ---  ------       --------------  -----
       0   name         1000 non-null   object
       1   description  1000 non-null   object
       2   location     1000 non-null   object
       3   url          1000 non-null   object
       4   tags         1000 non-null   object
       5   site_url     999 non-null    object
       6   tag_line     999 non-null    object
       7   long_desc    999 non-null    object
       8   thumbnail    975 non-null    object
       9   founders     999 non-null    object
       10  meta         999 non-null    object
       11  socials      999 non-null    object
      dtypes: object(12)
      memory usage: 93.9+ KB
      None
      #+end_example

  - *YC Founders*

      #+begin_src jupyter-python
      df_yc_founders = pd.read_csv('input/datasets/2024 YCombinator All Companies Dataset/founders.csv')
      print(df_yc_founders.info())
      #+end_src

      #+RESULTS:
      #+begin_example
      <class 'pandas.core.frame.DataFrame'>
      RangeIndex: 8465 entries, 0 to 8464
      Data columns (total 8 columns):
       #   Column           Non-Null Count  Dtype
      ---  ------           --------------  -----
       0   first_name       8461 non-null   object
       1   last_name        8456 non-null   object
       2   hnid             8465 non-null   object
       3   avatar_thumb     8465 non-null   object
       4   current_company  7624 non-null   object
       5   current_title    2201 non-null   object
       6   company_slug     8465 non-null   object
       7   top_company      8465 non-null   bool
      dtypes: bool(1), object(7)
      memory usage: 471.3+ KB
      None
      #+end_example

** How many YC companies are in unicorn status currently?

   #+begin_src jupyter-python
   df_yc_unicorns = df.assign(tmp_col=df.Company.str.lower()).merge(
       df_yc_companies[['Company', 'Slug', 'Short Description', 'Website', 'Logo', 'Team Size', 'Tags', 'Industries', 'Batch']].assign(tmp_col=lambda x: x.Company.str.lower()),
       on='tmp_col', how='inner').drop(['tmp_col', 'Company_y'], axis=1).rename(columns={'Company_x': 'Company'})
   df_yc_unicorns['Batch Season'] = df_yc_unicorns['Batch'].apply(lambda x: 'Summer' if x[0]=='S' else 'Winter')
   df_yc_unicorns['Batch Year'] = pd.to_numeric(df_yc_unicorns['Batch'].apply(lambda x: f'20{x[1:]}'))
   print(df_yc_unicorns.info())
   #+end_src

   #+RESULTS:
   #+begin_example
   <class 'pandas.core.frame.DataFrame'>
   RangeIndex: 98 entries, 0 to 97
   Data columns (total 29 columns):
    #   Column                        Non-Null Count  Dtype
   ---  ------                        --------------  -----
    0   Company                       98 non-null     object
    1   Valuation ($B)                98 non-null     float64
    2   Total Equity Funding ($)      98 non-null     int64
    3   Unicorn Date                  98 non-null     datetime64[ns]
    4   Date Founded                  98 non-null     int64
    5   Years to Unicorn              98 non-null     object
    6   Industry                      98 non-null     object
    7   Country                       98 non-null     object
    8   City                          98 non-null     object
    9   Select Investors              98 non-null     object
    10  Valuation ($)                 98 non-null     float64
    11  Unicorn Year                  98 non-null     int32
    12  Funding ($B)                  98 non-null     float64
    13  Funding ($M)                  98 non-null     float64
    14  Investors                     98 non-null     object
    15  Years to Unicorn (Months)     98 non-null     int64
    16  Years to Unicorn (Converted)  98 non-null     float64
    17  Latest Valuation ($B)         98 non-null     float64
    18  Founder(s)                    16 non-null     object
    19  Slug                          98 non-null     object
    20  Short Description             97 non-null     object
    21  Website                       98 non-null     object
    22  Logo                          95 non-null     object
    23  Team Size                     96 non-null     float64
    24  Tags                          92 non-null     object
    25  Industries                    98 non-null     object
    26  Batch                         98 non-null     object
    27  Batch Season                  98 non-null     object
    28  Batch Year                    98 non-null     int64
   dtypes: datetime64[ns](1), float64(7), int32(1), int64(4), object(16)
   memory usage: 21.9+ KB
   None
   #+end_example

** Top Companies by Valuation

  #+begin_src jupyter-python
  df_top_yc_unicorns = df_yc_unicorns.sort_values(by='Latest Valuation ($B)', ascending=False).head(20)
  fig, ax = plt.subplots(figsize=(12,6), dpi=200)
  ax = sns.barplot(data=df_top_yc_unicorns, x='Company', y='Latest Valuation ($B)', hue='Company')
  for i in ax.containers:
      ax.bar_label(i, fmt='%.1f')
  plt.xticks(rotation=45, ha='right')
  plt.suptitle('Top YC unicorns by Valuation')
  plt.show()
  #+end_src

  #+RESULTS:
  [[file:./.ob-jupyter/b80f726c9d16932e3ccd9fd566dc0a07ba2ac91c.png]]

** YC Batch Distribution

  #+begin_src jupyter-python
  _df = df_yc_unicorns.groupby(['Batch Year', 'Batch Season']).size().reset_index(name='count').sort_values(by='Batch Year')
  print(_df)
  #+end_src

  #+RESULTS:
  #+begin_example
      Batch Year Batch Season  count
  0         2009       Summer      2
  1         2011       Summer      3
  2         2011       Winter      1
  3         2012       Summer      3
  4         2012       Winter      2
  5         2013       Summer      1
  6         2013       Winter      1
  7         2014       Summer      6
  8         2014       Winter      3
  9         2015       Summer      7
  10        2015       Winter      3
  11        2016       Summer      6
  12        2016       Winter     11
  14        2017       Winter      7
  13        2017       Summer      5
  15        2018       Summer      3
  16        2018       Winter      8
  17        2019       Summer      1
  18        2019       Winter      4
  19        2020       Summer      5
  20        2020       Winter      3
  21        2021       Summer      1
  22        2021       Winter      3
  23        2022       Summer      1
  24        2022       Winter      1
  25        2023       Summer      1
  26        2023       Winter      1
  27        2024       Summer      3
  28        2024       Winter      2
  #+end_example

  #+begin_src jupyter-python
  plt.subplots(figsize=(12,6),dpi=300)
  sns.barplot(_df, x='Batch Year', y='count', hue='Batch Season')
  plt.xticks(rotation=45, ha='right')
  plt.suptitle('Batch Distribution of YC Unicorns')
  plt.show()
  #+end_src

  #+RESULTS:
  [[file:./.ob-jupyter/3278efb3d7815b3fd73af5d362716fc16954862d.png]]

** Top Countires

  #+begin_src jupyter-python
  top_countries = df_yc_unicorns['Country'].value_counts().nlargest(20).index
  top_countries
  #+end_src

  #+RESULTS:
  : Index(['United States', 'India', 'United Kingdom', 'Canada', 'Mexico', 'Indonesia', 'Colombia', 'Australia', 'Senegal', 'Estonia', 'Spain'], dtype='object', name='Country')

** Top Categories

  #+begin_src jupyter-python
  top_categories = df_yc_unicorns['Tags'].explode().value_counts().head(20).reset_index(name='Count')
  print(top_categories)
  #+end_src

  #+RESULTS:
  #+begin_example
                         Tags  Count
  0                      SaaS     25
  1                   Fintech     22
  2                       B2B     17
  3           Developer Tools     10
  4   Artificial Intelligence      9
  5          Machine Learning      7
  6               Marketplace      7
  7                   HR Tech      6
  8                E-commerce      5
  9                        AI      5
  10                 Payments      4
  11                Logistics      4
  12                  Climate      4
  13                Analytics      4
  14               Enterprise      4
  15               Automation      3
  16         Data Engineering      3
  17            Generative AI      3
  18            Manufacturing      3
  19                Education      3
  #+end_example

  #+begin_src jupyter-python
  plt.subplots(figsize=(12,6), dpi=200)
  ax = sns.barplot(data=top_categories, x='Tags', y='Count', hue='Tags')
  ax.set(ylabel='Number of Companies',
         xlabel='Category')
  for i in ax.containers:
      ax.bar_label(i)
  plt.xticks(rotation=45, ha='right')
  plt.suptitle('Top Categories')
  plt.show()
  #+end_src

  #+RESULTS:
  [[file:./.ob-jupyter/2f5619eef9eb36619c3c46784c120d73fa28357b.png]]

*** Team Size Distribution across Different Categories

  #+begin_src jupyter-python
  _df = df_yc_unicorns.explode('Tags')
  _df = _df[_df['Tags'].isin(top_categories['Tags'])]
  _df = _df.sort_values(by='Latest Valuation ($B)', ascending=False).head(50)

  plt.subplots(figsize=(12,6), dpi=300)
  ax = sns.scatterplot(_df, x='Tags', y='Team Size', hue='Company')
  sns.move_legend(ax, "upper left", bbox_to_anchor=(1, 1), frameon=False)
  ax.set(ylabel='Team Size',
         xlabel='Category')
  plt.xticks(rotation=45, ha='right')
  plt.suptitle('Team Size Distribution across Different Categories')
  plt.show()
  #+end_src

  #+RESULTS:
  [[file:./.ob-jupyter/d735a8d7f16b3c14a818627b7c2bd03ca3bcc8df.png]]

* Predictive Analysis
- *Valuation Predictions:* Use regression models to predict future valuations based on funding and industry factors.
- *Time to Unicorn*: Model the factors influencing the time taken to reach unicorn status.
* Case Study
** Scale AI

Scale AI, Inc. is an American data annotation company based in San Francisco, California. It provides data labeling and model evaluation services to develop applications for artificial intelligence.

** FTX

FTX Trading Ltd., trading as FTX, is a bankrupt company that formerly operated a cryptocurrency exchange and crypto hedge fund.

** Lalamove

Lalamove is a delivery and logistics company which operates primarily in Asia and parts of Latin America. Lalamove services are currently available in Hong Kong, Taipei, Singapore, Kuala Lumpur, Manila, Cebu, Bangkok, Pattaya, Ho Chi Minh City, Hanoi, Jakarta, Dhaka, São Paulo, Rio de Janeiro, and Mexico City.

* References
- [[https://en.wikipedia.org/wiki/Unicorn_(finance)][Unicorn (finance) [wikipedia]​]]
- [[https://www.ycombinator.com/companies][The YC Startup Directory]]
